rsync(1)                                                                                                 rsync(1)



NNAAMMEE
       rsync - a fast, versatile, remote (and local) file-copying tool

SSYYNNOOPPSSIISS
       Local:  rsync [OPTION...] SRC... [DEST]

       Access via remote shell:
         Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST]
         Push: rsync [OPTION...] SRC... [USER@]HOST:DEST

       Access via rsync daemon:
         Pull: rsync [OPTION...] [USER@]HOST::SRC... [DEST]
               rsync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST]
         Push: rsync [OPTION...] SRC... [USER@]HOST::DEST
               rsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST


       Usages with just one SRC arg and no DEST arg will list the source files instead of copying.

DDEESSCCRRIIPPTTIIOONN
       Rsync  is  a  fast  and extraordinarily versatile file copying tool.  It can copy locally, to/from another
       host over any remote shell, or to/from a remote rsync daemon.  It offers a large number  of  options  that
       control  every  aspect  of  its  behavior and permit very flexible specification of the set of files to be
       copied.  It is famous for its delta-transfer algorithm, which reduces the amount of  data  sent  over  the
       network  by  sending  only the differences between the source files and the existing files in the destina‐
       tion.  Rsync is widely used for backups and mirroring and as an improved copy command for everyday use.

       Rsync finds files that need to be transferred using a "quick check" algorithm (by default) that looks  for
       files  that  have changed in size or in last-modified time.  Any changes in the other preserved attributes
       (as requested by options) are made on the destination file directly when the quick  check  indicates  that
       the file’s data does not need to be updated.

       Some of the additional features of rsync are:

       o      support for copying links, devices, owners, groups, and permissions

       o      exclude and exclude-from options similar to GNU tar

       o      a CVS exclude mode for ignoring the same files that CVS would ignore

       o      can use any transparent remote shell, including ssh or rsh

       o      does not require super-user privileges

       o      pipelining of file transfers to minimize latency costs

       o      support for anonymous or authenticated rsync daemons (ideal for mirroring)


GGEENNEERRAALL
       Rsync  copies  files  either to or from a remote host, or locally on the current host (it does not support
       copying files between two remote hosts).

       There are two different ways for rsync to contact a remote system: using a  remote-shell  program  as  the
       transport (such as ssh or rsh) or contacting an rsync daemon directly via TCP.  The remote-shell transport
       is used whenever the source or destination path contains a single colon (:) separator after a host  speci‐
       fication.  Contacting an rsync daemon directly happens when the source or destination path contains a dou‐
       ble colon (::) separator after a host specification, OR when an rsync:// URL is specified  (see  also  the
       "USING RSYNC-DAEMON FEATURES VIA A REMOTE-SHELL CONNECTION" section for an exception to this latter rule).

       As  a  special case, if a single source arg is specified without a destination, the files are listed in an
       output format similar to "ls -l".

       As expected, if neither the source or destination path specify a remote host, the copy occurs locally (see
       also the ----lliisstt--oonnllyy option).

       Rsync  refers  to  the  local  side  as  the  "client" and the remote side as the "server".  Don’t confuse
       "server" with an rsync daemon -- a daemon is always a server, but a server can be either  a  daemon  or  a
       remote-shell spawned process.

SSEETTUUPP
       See the file README for installation instructions.

       Once  installed,  you can use rsync to any machine that you can access via a remote shell (as well as some
       that you can access using the rsync daemon-mode protocol).  For remote transfers, a modern rsync uses  ssh
       for  its  communications, but it may have been configured to use a different remote shell by default, such
       as rsh or remsh.

       You can also specify any remote shell you like, either by using the --ee command line option, or by  setting
       the RSYNC_RSH environment variable.

       Note that rsync must be installed on both the source and destination machines.

UUSSAAGGEE
       You  use  rsync in the same way you use rcp. You must specify a source and a destination, one of which may
       be remote.

       Perhaps the best way to explain the syntax is with some examples:

              rsync -t *.c foo:src/


       This would transfer all files matching the pattern *.c from the current directory to the directory src  on
       the  machine foo. If any of the files already exist on the remote system then the rsync remote-update pro‐
       tocol is used to update the file by sending only the differences. See the tech report for details.

              rsync -avz foo:src/bar /data/tmp


       This would recursively transfer all files  from  the  directory  src/bar  on  the  machine  foo  into  the
       /data/tmp/bar  directory  on the local machine. The files are transferred in "archive" mode, which ensures
       that symbolic links, devices, attributes, permissions, ownerships, etc. are  preserved  in  the  transfer.
       Additionally, compression will be used to reduce the size of data portions of the transfer.

              rsync -avz foo:src/bar/ /data/tmp


       A  trailing  slash  on the source changes this behavior to avoid creating an additional directory level at
       the destination.  You can think of a trailing / on a source as meaning "copy the contents of  this  direc‐
       tory"  as  opposed  to  "copy  the  directory by name", but in both cases the attributes of the containing
       directory are transferred to the containing directory on the destination.  In other  words,  each  of  the
       following  commands  copies  the  files  in  the  same  way,  including their setting of the attributes of
       /dest/foo:

              rsync -av /src/foo /dest
              rsync -av /src/foo/ /dest/foo


       Note also that host and module references don’t require a trailing slash  to  copy  the  contents  of  the
       default directory.  For example, both of these copy the remote directory’s contents into "/dest":

              rsync -av host: /dest
              rsync -av host::module /dest


       You  can  also use rsync in local-only mode, where both the source and destination don’t have a ’:’ in the
       name. In this case it behaves like an improved copy command.

       Finally, you can list all the (listable) modules available from a particular rsync daemon by  leaving  off
       the module name:

              rsync somehost.mydomain.com::


       See the following section for more details.

AADDVVAANNCCEEDD UUSSAAGGEE
       The  syntax  for requesting multiple files from a remote host is done by specifying additional remote-host
       args in the same style as the first, or with the hostname omitted.  For instance, all these work:

              rsync -av host:file1 :file2 host:file{3,4} /dest/
              rsync -av host::modname/file{1,2} host::modname/file3 /dest/
              rsync -av host::modname/file1 ::modname/file{3,4}


       Older versions of rsync required using quoted spaces in the SRC, like these examples:

              rsync -av host:'dir1/file1 dir2/file2' /dest
              rsync host::'modname/dir1/file1 modname/dir2/file2' /dest


       This word-splitting still works (by default) in the latest rsync, but is not as easy to use as  the  first
       method.

       If  you  need  to  transfer a filename that contains whitespace, you can either specify the ----pprrootteecctt--aarrggss
       (--ss) option, or you’ll need to escape the whitespace in a way that the remote shell will understand.   For
       instance:

              rsync -av host:'file\ name\ with\ spaces' /dest


CCOONNNNEECCTTIINNGG TTOO AANN RRSSYYNNCC DDAAEEMMOONN
       It  is also possible to use rsync without a remote shell as the transport.  In this case you will directly
       connect to a remote rsync daemon, typically using TCP port 873.  (This obviously requires the daemon to be
       running on the remote system, so refer to the STARTING AN RSYNC DAEMON TO ACCEPT CONNECTIONS section below
       for information on that.)

       Using rsync in this way is the same as using it with a remote shell except that:

       o      you either use a double colon :: instead of a single colon to separate the hostname from the  path,
              or you use an rsync:// URL.

       o      the first word of the "path" is actually a module name.

       o      the remote daemon may print a message of the day when you connect.

       o      if  you  specify  no path name on the remote daemon then the list of accessible paths on the daemon
              will be shown.

       o      if you specify no local destination then a listing of the specified files on the remote  daemon  is
              provided.

       o      you must not specify the ----rrsshh (--ee) option.


       An example that copies all the files in a remote module named "src":

           rsync -av host::src /dest


       Some  modules  on  the remote daemon may require authentication. If so, you will receive a password prompt
       when you connect. You can avoid the password prompt by setting the environment variable RSYNC_PASSWORD  to
       the password you want to use or using the ----ppaasssswwoorrdd--ffiillee option. This may be useful when scripting rsync.

       WARNING:  On  some  systems environment variables are visible to all users. On those systems using ----ppaassss‐‐
       wwoorrdd--ffiillee is recommended.

       You may establish the connection via a web proxy by setting the  environment  variable  RSYNC_PROXY  to  a
       hostname:port  pair  pointing  to  your  web proxy.  Note that your web proxy’s configuration must support
       proxy connections to port 873.

       You may also establish a daemon connection using a program as a proxy by setting the environment  variable
       RSYNC_CONNECT_PROG  to  the  commands  you wish to run in place of making a direct socket connection.  The
       string may contain the escape "%H" to represent the hostname specified in the rsync command (so  use  "%%"
       if you need a single "%" in your string).  For example:

         export RSYNC_CONNECT_PROG='ssh proxyhost nc %H 873'
         rsync -av targethost1::module/src/ /dest/
         rsync -av rsync:://targethost2/module/src/ /dest/


       The  command  specified  above uses ssh to run nc (netcat) on a proxyhost, which forwards all data to port
       873 (the rsync daemon) on the targethost (%H).

UUSSIINNGG RRSSYYNNCC--DDAAEEMMOONN FFEEAATTUURREESS VVIIAA AA RREEMMOOTTEE--SSHHEELLLL CCOONNNNEECCTTIIOONN
       It is sometimes useful to use various features of an rsync daemon (such as named modules) without actually
       allowing  any  new  socket  connections  into  a  system  (other  than  what  is already required to allow
       remote-shell access).  Rsync supports connecting to a host using a remote shell and then spawning  a  sin‐
       gle-use "daemon" server that expects to read its config file in the home dir of the remote user.  This can
       be useful if you want to encrypt a daemon-style transfer’s data, but since the daemon is started up  fresh
       by  the remote user, you may not be able to use features such as chroot or change the uid used by the dae‐
       mon.  (For another way to encrypt a daemon transfer, consider using ssh to tunnel a local port to a remote
       machine  and  configure  a  normal rsync daemon on that remote host to only allow connections from "local‐
       host".)

       From the user’s perspective, a daemon transfer via a remote-shell connection uses  nearly  the  same  com‐
       mand-line syntax as a normal rsync-daemon transfer, with the only exception being that you must explicitly
       set the remote shell program on the command-line with the ----rrsshh==CCOOMMMMAANNDD option.  (Setting the RSYNC_RSH in
       the environment will not turn on this functionality.)  For example:

           rsync -av --rsh=ssh host::module /dest


       If  you  need to specify a different remote-shell user, keep in mind that the user@ prefix in front of the
       host is specifying the rsync-user value (for a module  that  requires  user-based  authentication).   This
       means  that you must give the ’-l user’ option to ssh when specifying the remote-shell, as in this example
       that uses the short version of the ----rrsshh option:

           rsync -av -e "ssh -l ssh-user" rsync-user@host::module /dest


       The "ssh-user" will be used at the ssh level; the "rsync-user" will be used to log-in to the "module".

SSTTAARRTTIINNGG AANN RRSSYYNNCC DDAAEEMMOONN TTOO AACCCCEEPPTT CCOONNNNEECCTTIIOONNSS
       In order to connect to an rsync daemon, the remote system needs to have a daemon already  running  (or  it
       needs  to have configured something like inetd to spawn an rsync daemon for incoming connections on a par‐
       ticular port).  For full information on how to start a daemon that will handling incoming  socket  connec‐
       tions, see the rrssyynnccdd..ccoonnff(5) man page -- that is the config file for the daemon, and it contains the full
       details for how to run the daemon (including stand-alone and inetd configurations).

       If you’re using one of the remote-shell transports for the transfer, there is no need to manually start an
       rsync daemon.

SSOORRTTEEDD TTRRAANNSSFFEERR OORRDDEERR
       Rsync  always  sorts  the  specified  filenames into its internal transfer list.  This handles the merging
       together of the contents of identically named directories, makes it easy to  remove  duplicate  filenames,
       and  may  confuse  someone  when the files are transferred in a different order than what was given on the
       command-line.

       If you need a particular file to be transferred prior to another, either separate the files into different
       rsync  calls,  or consider using ----ddeellaayy--uuppddaatteess (which doesn’t affect the sorted transfer order, but does
       make the final file-updating phase happen much more rapidly).

EEXXAAMMPPLLEESS
       Here are some examples of how I use rsync.

       To backup my wife’s home directory, which consists of large MS Word files and mail folders, I use  a  cron
       job that runs

              rsync -Cavz . arvidsjaur:backup


       each night over a PPP connection to a duplicate directory on my machine "arvidsjaur".

       To synchronize my samba source trees I use the following Makefile targets:

           get:
                   rsync -avuzb --exclude '*~' samba:samba/ .
           put:
                   rsync -Cavuzb . samba:samba/
           sync: get put


       this  allows  me to sync with a CVS directory at the other end of the connection. I then do CVS operations
       on the remote machine, which saves a lot of time as the remote CVS protocol isn’t very efficient.

       I mirror a directory between my "old" and "new" ftp sites with the command:

       rsync -az -e ssh --delete ~ftp/pub/samba nimbus:"~ftp/pub/tridge"

       This is launched from cron every few hours.

OOPPTTIIOONNSS SSUUMMMMAARRYY
       Here is a short summary of the options available in rsync. Please refer to the detailed description  below
       for a complete description.

        -v, --verbose               increase verbosity
            --info=FLAGS            fine-grained informational verbosity
            --debug=FLAGS           fine-grained debug verbosity
            --msgs2stderr           special output handling for debugging
        -q, --quiet                 suppress non-error messages
            --no-motd               suppress daemon-mode MOTD (see caveat)
        -c, --checksum              skip based on checksum, not mod-time & size
        -a, --archive               archive mode; equals -rlptgoD (no -H,-A,-X)
            --no-OPTION             turn off an implied OPTION (e.g. --no-D)
        -r, --recursive             recurse into directories
        -R, --relative              use relative path names
            --no-implied-dirs       don't send implied dirs with --relative
        -b, --backup                make backups (see --suffix & --backup-dir)
            --backup-dir=DIR        make backups into hierarchy based in DIR
            --suffix=SUFFIX         backup suffix (default ~ w/o --backup-dir)
        -u, --update                skip files that are newer on the receiver
            --inplace               update destination files in-place
            --append                append data onto shorter files
            --append-verify         --append w/old data in file checksum
        -d, --dirs                  transfer directories without recursing
        -l, --links                 copy symlinks as symlinks
        -L, --copy-links            transform symlink into referent file/dir
            --copy-unsafe-links     only "unsafe" symlinks are transformed
            --safe-links            ignore symlinks that point outside the tree
            --munge-links           munge symlinks to make them safer
        -k, --copy-dirlinks         transform symlink to dir into referent dir
        -K, --keep-dirlinks         treat symlinked dir on receiver as dir
        -H, --hard-links            preserve hard links
        -p, --perms                 preserve permissions
        -E, --executability         preserve executability
            --chmod=CHMOD           affect file and/or directory permissions
        -A, --acls                  preserve ACLs (implies -p)
        -X, --xattrs                preserve extended attributes
        -o, --owner                 preserve owner (super-user only)
        -g, --group                 preserve group
            --devices               preserve device files (super-user only)
            --specials              preserve special files
        -D                          same as --devices --specials
        -t, --times                 preserve modification times
        -O, --omit-dir-times        omit directories from --times
        -J, --omit-link-times       omit symlinks from --times
            --super                 receiver attempts super-user activities
            --fake-super            store/recover privileged attrs using xattrs
        -S, --sparse                handle sparse files efficiently
            --preallocate           allocate dest files before writing
        -n, --dry-run               perform a trial run with no changes made
        -W, --whole-file            copy files whole (w/o delta-xfer algorithm)
        -x, --one-file-system       don't cross filesystem boundaries
        -B, --block-size=SIZE       force a fixed checksum block-size
        -e, --rsh=COMMAND           specify the remote shell to use
            --rsync-path=PROGRAM    specify the rsync to run on remote machine
            --existing              skip creating new files on receiver
            --ignore-existing       skip updating files that exist on receiver
            --remove-source-files   sender removes synchronized files (non-dir)
            --del                   an alias for --delete-during
            --delete                delete extraneous files from dest dirs
            --delete-before         receiver deletes before xfer, not during
            --delete-during         receiver deletes during the transfer
            --delete-delay          find deletions during, delete after
            --delete-after          receiver deletes after transfer, not during
            --delete-excluded       also delete excluded files from dest dirs
            --ignore-missing-args   ignore missing source args without error
            --delete-missing-args   delete missing source args from destination
            --ignore-errors         delete even if there are I/O errors
            --force                 force deletion of dirs even if not empty
            --max-delete=NUM        don't delete more than NUM files
            --max-size=SIZE         don't transfer any file larger than SIZE
            --min-size=SIZE         don't transfer any file smaller than SIZE
            --partial               keep partially transferred files
            --partial-dir=DIR       put a partially transferred file into DIR
            --delay-updates         put all updated files into place at end
        -m, --prune-empty-dirs      prune empty directory chains from file-list
            --numeric-ids           don't map uid/gid values by user/group name
            --usermap=STRING        custom username mapping
            --groupmap=STRING       custom groupname mapping
            --chown=USER:GROUP      simple username/groupname mapping
            --timeout=SECONDS       set I/O timeout in seconds
            --contimeout=SECONDS    set daemon connection timeout in seconds
        -I, --ignore-times          don't skip files that match size and time
            --size-only             skip files that match in size
            --modify-window=NUM     compare mod-times with reduced accuracy
        -T, --temp-dir=DIR          create temporary files in directory DIR
        -y, --fuzzy                 find similar file for basis if no dest file
            --compare-dest=DIR      also compare received files relative to DIR
            --copy-dest=DIR         ... and include copies of unchanged files
            --link-dest=DIR         hardlink to files in DIR when unchanged
        -z, --compress              compress file data during the transfer
            --compress-level=NUM    explicitly set compression level
            --skip-compress=LIST    skip compressing files with suffix in LIST
        -C, --cvs-exclude           auto-ignore files in the same way CVS does
        -f, --filter=RULE           add a file-filtering RULE
        -F                          same as --filter='dir-merge /.rsync-filter'
                                    repeated: --filter='- .rsync-filter'
            --exclude=PATTERN       exclude files matching PATTERN
            --exclude-from=FILE     read exclude patterns from FILE
            --include=PATTERN       don't exclude files matching PATTERN
            --include-from=FILE     read include patterns from FILE
            --files-from=FILE       read list of source-file names from FILE
        -0, --from0                 all *from/filter files are delimited by 0s
        -s, --protect-args          no space-splitting; wildcard chars only
            --address=ADDRESS       bind address for outgoing socket to daemon
            --port=PORT             specify double-colon alternate port number
            --sockopts=OPTIONS      specify custom TCP options
            --blocking-io           use blocking I/O for the remote shell
            --outbuf=N|L|B          set out buffering to None, Line, or Block
            --stats                 give some file-transfer stats
        -8, --8-bit-output          leave high-bit chars unescaped in output
        -h, --human-readable        output numbers in a human-readable format
            --progress              show progress during transfer
        -P                          same as --partial --progress
        -i, --itemize-changes       output a change-summary for all updates
        -M, --remote-option=OPTION  send OPTION to the remote side only
            --out-format=FORMAT     output updates using the specified FORMAT
            --log-file=FILE         log what we're doing to the specified FILE
            --log-file-format=FMT   log updates using the specified FMT
            --password-file=FILE    read daemon-access password from FILE
            --list-only             list the files instead of copying them
            --bwlimit=RATE          limit socket I/O bandwidth
            --write-batch=FILE      write a batched update to FILE
            --only-write-batch=FILE like --write-batch but w/o updating dest
            --read-batch=FILE       read a batched update from FILE
            --protocol=NUM          force an older protocol version to be used
            --iconv=CONVERT_SPEC    request charset conversion of filenames
            --checksum-seed=NUM     set block/file checksum seed (advanced)
        -4, --ipv4                  prefer IPv4
        -6, --ipv6                  prefer IPv6
            --version               print version number
       (-h) --help                  show this help (see below for -h comment)


       Rsync can also be run as a daemon, in which case the following options are accepted:

            --daemon                run as an rsync daemon
            --address=ADDRESS       bind to the specified address
            --bwlimit=RATE          limit socket I/O bandwidth
            --config=FILE           specify alternate rsyncd.conf file
        -M, --dparam=OVERRIDE       override global daemon config parameter
            --no-detach             do not detach from the parent
            --port=PORT             listen on alternate port number
            --log-file=FILE         override the "log file" setting
            --log-file-format=FMT   override the "log format" setting
            --sockopts=OPTIONS      specify custom TCP options
        -v, --verbose               increase verbosity
        -4, --ipv4                  prefer IPv4
        -6, --ipv6                  prefer IPv6
        -h, --help                  show this help (if used after --daemon)


OOPPTTIIOONNSS
       Rsync  accepts  both long (double-dash + word) and short (single-dash + letter) options.  The full list of
       the available options are described below.  If an option can be  specified  in  more  than  one  way,  the
       choices  are  comma-separated.  Some options only have a long variant, not a short.  If the option takes a
       parameter, the parameter is only listed after the long variant, even though it must also be specified  for
       the  short.   When  specifying  a parameter, you can either use the form --option=param or replace the ’=’
       with whitespace.  The parameter may need to be quoted in some manner for it to survive  the  shell’s  com‐
       mand-line  parsing.   Keep in mind that a leading tilde (~) in a filename is substituted by your shell, so
       --option=~/foo will not change the tilde into your home directory (remove the ’=’ for that).

       ----hheellpp Print a short help page describing the options available in rsync and exit.  For  backward-compati‐
              bility  with older versions of rsync, the help will also be output if you use the --hh option without
              any other args.

       ----vveerrssiioonn
              print the rsync version number and exit.

       --vv,, ----vveerrbboossee
              This option increases the amount of information you are given during  the  transfer.   By  default,
              rsync  works silently. A single --vv will give you information about what files are being transferred
              and a brief summary at the end. Two --vv options will give you information on what  files  are  being
              skipped  and  slightly more information at the end. More than two --vv options should only be used if
              you are debugging rsync.

              In a modern rsync, the --vv option is equivalent to the setting  of  groups  of  ----iinnffoo  and  ----ddeebbuugg
              options.  You can choose to use these newer options in addition to, or in place of using ----vveerrbboossee,
              as any fine-grained settings override the implied settings of --vv.  Both ----iinnffoo and ----ddeebbuugg  have  a
              way to ask for help that tells you exactly what flags are set for each increase in verbosity.

       ----iinnffoo==FFLLAAGGSS
              This  option  lets  you  have fine-grained control over the information output you want to see.  An
              individual flag name may be followed by a level number, with 0 meaning to silence  that  output,  1
              being  the  default  output level, and higher numbers increasing the output of that flag (for those
              that support higher levels).  Use ----iinnffoo==hheellpp to see all the available flag names, what  they  out‐
              put, and what flag names are added for each increase in the verbose level.  Some examples:

                  rsync -a --info=progress2 src/ dest/
                  rsync -avv --info=stats2,misc1,flist0 src/ dest/


              Note  that ----iinnffoo==nnaammee’s output is affected by the ----oouutt--ffoorrmmaatt and ----iitteemmiizzee--cchhaannggeess (--ii) options.
              See those options for more information on what is output and when.

              This option was added to 3.1.0, so an older rsync on the server side might reject your attempts  at
              fine-grained  control  (if one or more flags needed to be send to the server and the server was too
              old to understand them).

       ----ddeebbuugg==FFLLAAGGSS
              This option lets you have fine-grained control over the debug output you want to see.  An  individ‐
              ual flag name may be followed by a level number, with 0 meaning to silence that output, 1 being the
              default output level, and higher numbers increasing the output of that flag (for those that support
              higher  levels).   Use ----ddeebbuugg==hheellpp to see all the available flag names, what they output, and what
              flag names are added for each increase in the verbose level.  Some examples:

                  rsync -avvv --debug=none src/ dest/
                  rsync -avA --del --debug=del2,acl src/ dest/


              Note that some debug messages will only be output when ----mmssggss22ssttddeerrrr is specified, especially those
              pertaining to I/O and buffer debugging.

              This  option was added to 3.1.0, so an older rsync on the server side might reject your attempts at
              fine-grained control (if one or more flags needed to be send to the server and the server  was  too
              old to understand them).

       ----mmssggss22ssttddeerrrr
              This option changes rsync to send all its output directly to stderr rather than to send messages to
              the client side via the protocol (which normally outputs info messages via stdout).  This is mainly
              intended  for  debugging in order to avoid changing the data sent via the protocol, since the extra
              protocol data can change what is being tested.  Keep in mind that a daemon connection does not have
              a  stderr channel to send messages back to the client side, so if you are doing any daemon-transfer
              debugging using this option, you should start up a daemon using ----nnoo--ddeettaacchh so that you can see the
              stderr output on the daemon side.

              This  option  has  the side-effect of making stderr output get line-buffered so that the merging of
              the output of 3 programs happens in a more readable manner.

       --qq,, ----qquuiieett
              This option decreases the amount of information you are given during  the  transfer,  notably  sup‐
              pressing  information  messages  from  the remote server. This option is useful when invoking rsync
              from cron.

       ----nnoo--mmoottdd
              This option affects the information that is output by the client at the start of a daemon transfer.
              This  suppresses  the  message-of-the-day (MOTD) text, but it also affects the list of modules that
              the daemon sends in response to the "rsync host::" request (due to a limitation in the rsync proto‐
              col), so omit this option if you want to request the list of modules from the daemon.

       --II,, ----iiggnnoorree--ttiimmeess
              Normally  rsync  will  skip any files that are already the same size and have the same modification
              timestamp.  This option turns off this "quick check" behavior, causing all files to be updated.

       ----ssiizzee--oonnllyy
              This modifies rsync’s "quick check" algorithm for finding files that need to be transferred, chang‐
              ing it from the default of transferring files with either a changed size or a changed last-modified
              time to just looking for files that have changed in size.  This is  useful  when  starting  to  use
              rsync after using another mirroring system which may not preserve timestamps exactly.

       ----mmooddiiffyy--wwiinnddooww
              When comparing two timestamps, rsync treats the timestamps as being equal if they differ by no more
              than the modify-window value.  This is normally 0 (for an exact match), but you may find it  useful
              to  set  this to a larger value in some situations.  In particular, when transferring to or from an
              MS Windows FAT filesystem (which represents times with a 2-second resolution), ----mmooddiiffyy--wwiinnddooww==11 is
              useful (allowing times to differ by up to 1 second).

       --cc,, ----cchheecckkssuumm
              This  changes  the  way  rsync checks if the files have been changed and are in need of a transfer.
              Without this option, rsync uses a "quick check" that (by default) checks if each  file’s  size  and
              time  of last modification match between the sender and receiver.  This option changes this to com‐
              pare a 128-bit checksum for each file that has a matching size.   Generating  the  checksums  means
              that  both  sides  will  expend a lot of disk I/O reading all the data in the files in the transfer
              (and this is prior to any reading that will be done to transfer changed files), so  this  can  slow
              things down significantly.

              The  sending  side  generates  its checksums while it is doing the file-system scan that builds the
              list of the available files.  The receiver generates its checksums when it is scanning for  changed
              files, and will checksum any file that has the same size as the corresponding sender’s file:  files
              with either a changed size or a changed checksum are selected for transfer.

              Note that rsync always verifies that each _t_r_a_n_s_f_e_r_r_e_d  file  was  correctly  reconstructed  on  the
              receiving  side by checking a whole-file checksum that is generated as the file is transferred, but
              that  automatic  after-the-transfer  verification  has   nothing   to   do   with   this   option’s
              before-the-transfer "Does this file need to be updated?" check.

              For  protocol 30 and beyond (first supported in 3.0.0), the checksum used is MD5.  For older proto‐
              cols, the checksum used is MD4.

       --aa,, ----aarrcchhiivvee
              This is equivalent to --rrllppttggooDD. It is a quick way of saying you want recursion and want to preserve
              almost  everything (with -H being a notable omission).  The only exception to the above equivalence
              is when ----ffiilleess--ffrroomm is specified, in which case --rr is not implied.

              Note that --aa ddooeess nnoott pprreesseerrvvee hhaarrddlliinnkkss, because finding multiply-linked files is expensive.   You
              must separately specify --HH.

       --no-OPTION
              You  may  turn  off  one  or more implied options by prefixing the option name with "no-".  Not all
              options may be prefixed with a "no-": only options that are implied by other options (e.g.  ----nnoo--DD,
              ----nnoo--ppeerrmmss)  or have different defaults in various circumstances (e.g. ----nnoo--wwhhoollee--ffiillee, ----nnoo--bblloocckk‐‐
              iinngg--iioo, ----nnoo--ddiirrss).  You may specify either the short or the long option name after the "no-"  pre‐
              fix (e.g. ----nnoo--RR is the same as ----nnoo--rreellaattiivvee).

              For  example:  if you want to use --aa (----aarrcchhiivvee) but don’t want --oo (----oowwnneerr), instead of converting
              --aa into --rrllppttggDD, you could specify --aa ----nnoo--oo (or --aa ----nnoo--oowwnneerr).

              The order of the options is important:  if you specify ----nnoo--rr --aa, the --rr option would end up  being
              turned  on,  the opposite of --aa ----nnoo--rr.  Note also that the side-effects of the ----ffiilleess--ffrroomm option
              are NOT positional, as it affects the default state of several options  and  slightly  changes  the
              meaning of --aa (see the ----ffiilleess--ffrroomm option for more details).

       --rr,, ----rreeccuurrssiivvee
              This tells rsync to copy directories recursively.  See also ----ddiirrss (--dd).

              Beginning  with rsync 3.0.0, the recursive algorithm used is now an incremental scan that uses much
              less memory than before and begins the transfer after the scanning of  the  first  few  directories
              have  been  completed.   This  incremental  scan only affects our recursion algorithm, and does not
              change a non-recursive transfer.  It is also only possible when both ends of the  transfer  are  at
              least version 3.0.0.

              Some  options  require  rsync  to know the full file list, so these options disable the incremental
              recursion  mode.   These  include:   ----ddeelleettee--bbeeffoorree,   ----ddeelleettee--aafftteerr,   ----pprruunnee--eemmppttyy--ddiirrss,   and
              ----ddeellaayy--uuppddaatteess.   Because  of  this,  the  default  delete  mode  when you specify ----ddeelleettee is now
              ----ddeelleettee--dduurriinngg when both ends of the connection are at least 3.0.0 (use ----ddeell  or  ----ddeelleettee--dduurriinngg
              to  request  this improved deletion mode explicitly).  See also the ----ddeelleettee--ddeellaayy option that is a
              better choice than using ----ddeelleettee--aafftteerr.

              Incremental recursion can be disabled using the ----nnoo--iinncc--rreeccuurrssiivvee option or its  shorter  ----nnoo--ii--rr
              alias.

       --RR,, ----rreellaattiivvee
              Use  relative  paths. This means that the full path names specified on the command line are sent to
              the server rather than just the last parts of the filenames. This is particularly useful  when  you
              want to send several different directories at the same time. For example, if you used this command:

                 rsync -av /foo/bar/baz.c remote:/tmp/


              ... this would create a file named baz.c in /tmp/ on the remote machine. If instead you used

                 rsync -avR /foo/bar/baz.c remote:/tmp/


              then  a  file  named /tmp/foo/bar/baz.c would be created on the remote machine, preserving its full
              path.  These extra path elements are called "implied directories" (i.e. the "foo" and the "foo/bar"
              directories in the above example).

              Beginning with rsync 3.0.0, rsync always sends these implied directories as real directories in the
              file list, even if a path element is really a symlink on the  sending  side.   This  prevents  some
              really unexpected behaviors when copying the full path of a file that you didn’t realize had a sym‐
              link in its path.  If you want to duplicate a server-side symlink, include both the symlink via its
              path, and referent directory via its real path.  If you’re dealing with an older rsync on the send‐
              ing side, you may need to use the ----nnoo--iimmpplliieedd--ddiirrss option.

              It is also possible to limit the amount of path information that is sent as implied directories for
              each  path  you  specify.   With a modern rsync on the sending side (beginning with 2.6.7), you can
              insert a dot and a slash into the source path, like this:

                 rsync -avR /foo/./bar/baz.c remote:/tmp/


              That would create /tmp/bar/baz.c on the remote machine.  (Note that the dot must be followed  by  a
              slash,  so  "/foo/."  would not be abbreviated.)  For older rsync versions, you would need to use a
              chdir to limit the source path.  For example, when pushing files:

                 (cd /foo; rsync -avR bar/baz.c remote:/tmp/)


              (Note that the parens put the two commands into a sub-shell,  so  that  the  "cd"  command  doesn’t
              remain in effect for future commands.)  If you’re pulling files from an older rsync, use this idiom
              (but only for a non-daemon transfer):

                 rsync -avR --rsync-path="cd /foo; rsync" \
                     remote:bar/baz.c /tmp/


       ----nnoo--iimmpplliieedd--ddiirrss
              This option affects the default behavior of the ----rreellaattiivvee  option.   When  it  is  specified,  the
              attributes of the implied directories from the source names are not included in the transfer.  This
              means that the corresponding path elements on the destination system are  left  unchanged  if  they
              exist,  and  any missing implied directories are created with default attributes.  This even allows
              these implied path elements to have big differences, such as being a symlink to a directory on  the
              receiving side.

              For  instance,  if  a  command-line  arg  or  a  files-from  entry  told rsync to transfer the file
              "path/foo/file", the directories "path" and "path/foo" are implied when  ----rreellaattiivvee  is  used.   If
              "path/foo"  is  a  symlink to "bar" on the destination system, the receiving rsync would ordinarily
              delete "path/foo", recreate it as a directory, and receive the file into the new  directory.   With
              ----nnoo--iimmpplliieedd--ddiirrss,  the  receiving  rsync updates "path/foo/file" using the existing path elements,
              which means that the file ends up being created in "path/bar".  Another way to accomplish this link
              preservation  is  to use the ----kkeeeepp--ddiirrlliinnkkss option (which will also affect symlinks to directories
              in the rest of the transfer).

              When pulling files from an rsync older than 3.0.0, you may need to use this option if  the  sending
              side  has  a symlink in the path you request and you wish the implied directories to be transferred
              as normal directories.

       --bb,, ----bbaacckkuupp
              With this option, preexisting destination files are renamed as each file is transferred or deleted.
              You  can  control  where  the  backup  file  goes  and what (if any) suffix gets appended using the
              ----bbaacckkuupp--ddiirr and ----ssuuffffiixx options.

              Note that if you don’t specify ----bbaacckkuupp--ddiirr, (1) the ----oommiitt--ddiirr--ttiimmeess option will be  implied,  and
              (2)  if  ----ddeelleettee  is  also  in effect (without ----ddeelleettee--eexxcclluuddeedd), rsync will add a "protect" fil‐
              ter-rule for the backup suffix to the end of all your existing excludes (e.g.  --ff  ""PP  **~~"").   This
              will  prevent  previously  backed-up files from being deleted.  Note that if you are supplying your
              own filter rules, you may need to manually insert your own exclude/protect rule somewhere higher up
              in  the  list  so that it has a high enough priority to be effective (e.g., if your rules specify a
              trailing inclusion/exclusion of ’*’, the auto-added rule would never be reached).

       ----bbaacckkuupp--ddiirr==DDIIRR
              In combination with the ----bbaacckkuupp option, this tells rsync to store all  backups  in  the  specified
              directory  on  the receiving side.  This can be used for incremental backups.  You can additionally
              specify a backup suffix using the ----ssuuffffiixx option (otherwise the files backed up in  the  specified
              directory will keep their original filenames).

              Note  that if you specify a relative path, the backup directory will be relative to the destination
              directory, so you probably want to specify either an absolute path  or  a  path  that  starts  with
              "../".   If  an  rsync  daemon  is the receiver, the backup dir cannot go outside the module’s path
              hierarchy, so take extra care not to delete it or copy into it.

       ----ssuuffffiixx==SSUUFFFFIIXX
              This option allows you to override the default backup suffix used with the  ----bbaacckkuupp  (--bb)  option.
              The default suffix is a ~ if no ---bbaacckkuupp--ddiirr was specified, otherwise it is an empty string.

       --uu,, ----uuppddaattee
              This forces rsync to skip any files which exist on the destination and have a modified time that is
              newer than the source file.  (If an existing destination file has a modification time equal to  the
              source file’s, it will be updated if the sizes are different.)

              Note  that this does not affect the copying of symlinks or other special files.  Also, a difference
              of file format between the sender and receiver is always considered to be important enough  for  an
              update, no matter what date is on the objects.  In other words, if the source has a directory where
              the destination has a file, the transfer would occur regardless of the timestamps.

              This option is a transfer rule, not an exclude, so it doesn’t affect the data that  goes  into  the
              file-lists,  and  thus  it  doesn’t  affect  deletions.  It just limits the files that the receiver
              requests to be transferred.

       ----iinnppllaaccee
              This option changes how rsync transfers a file when its data needs to be updated:  instead  of  the
              default  method  of  creating  a new copy of the file and moving it into place when it is complete,
              rsync instead writes the updated data directly to the destination file.

              This has several effects:

              o      Hard links are not broken.  This means the new data will be visible through other hard links
                     to  the  destination  file.  Moreover, attempts to copy differing source files onto a multi‐
                     ply-linked destination file will result in a "tug of war" with the destination data changing
                     back and forth.

              o      In-use  binaries cannot be updated (either the OS will prevent this from happening, or bina‐
                     ries that attempt to swap-in their data will misbehave or crash).

              o      The file’s data will be in an inconsistent state during the transfer and will be  left  that
                     way if the transfer is interrupted or if an update fails.

              o      A file that rsync cannot write to cannot be updated. While a super user can update any file,
                     a normal user needs to be granted write permission for the open of the file for  writing  to
                     be successful.

              o      The efficiency of rsync’s delta-transfer algorithm may be reduced if some data in the desti‐
                     nation file is overwritten before it can be copied to a position later in  the  file.   This
                     does  not  apply  if you use ----bbaacckkuupp, since rsync is smart enough to use the backup file as
                     the basis file for the transfer.


              WARNING: you should not use this option to update files that are being accessed by  others,  so  be
              careful when choosing to use this for a copy.

              This  option  is useful for transferring large files with block-based changes or appended data, and
              also on systems that are disk bound, not network bound.  It can  also  help  keep  a  copy-on-write
              filesystem snapshot from diverging the entire contents of a file that only has minor changes.

              The  option  implies  ----ppaarrttiiaall  (since an interrupted transfer does not delete the file), but con‐
              flicts with ----ppaarrttiiaall--ddiirr and ----ddeellaayy--uuppddaatteess.  Prior to rsync 2.6.4 ----iinnppllaaccee was also  incompati‐
              ble with ----ccoommppaarree--ddeesstt and ----lliinnkk--ddeesstt.

       ----aappppeenndd
              This  causes rsync to update a file by appending data onto the end of the file, which presumes that
              the data that already exists on the receiving side is identical with the start of the file  on  the
              sending side.  If a file needs to be transferred and its size on the receiver is the same or longer
              than the size on the sender, the file is skipped.  This does not interfere with the updating  of  a
              file’s non-content attributes (e.g. permissions, ownership, etc.) when the file does not need to be
              transferred, nor does it affect the updating of any non-regular files.  Implies ----iinnppllaaccee, but does
              not conflict with ----ssppaarrssee (since it is always extending a file’s length).

       ----aappppeenndd--vveerriiffyy
              This  works  just like the ----aappppeenndd option, but the existing data on the receiving side is included
              in the full-file checksum verification step, which will cause a file to be resent if the final ver‐
              ification step fails (rsync uses a normal, non-appending ----iinnppllaaccee transfer for the resend).

              Note:  prior  to rsync 3.0.0, the ----aappppeenndd option worked like ----aappppeenndd--vveerriiffyy, so if you are inter‐
              acting with an older rsync (or the transfer is using a protocol prior  to  30),  specifying  either
              append option will initiate an ----aappppeenndd--vveerriiffyy transfer.

       --dd,, ----ddiirrss
              Tell  the  sending  side  to  include  any directories that are encountered.  Unlike ----rreeccuurrssiivvee, a
              directory’s contents are not copied unless the directory name specified  is  "."  or  ends  with  a
              trailing  slash  (e.g. ".", "dir/.", "dir/", etc.).  Without this option or the ----rreeccuurrssiivvee option,
              rsync will skip all directories it encounters (and output a message to that effect for  each  one).
              If you specify both ----ddiirrss and ----rreeccuurrssiivvee, ----rreeccuurrssiivvee takes precedence.

              The  ----ddiirrss  option  is  implied by the ----ffiilleess--ffrroomm option or the ----lliisstt--oonnllyy option (including an
              implied ----lliisstt--oonnllyy usage) if ----rreeccuurrssiivvee wasn’t specified (so that directories  are  seen  in  the
              listing).  Specify ----nnoo--ddiirrss (or ----nnoo--dd) if you want to turn this off.

              There  is  also a backward-compatibility helper option, ----oolldd--ddiirrss (or ----oolldd--dd) that tells rsync to
              use a hack of "-r --exclude=’/*/*’" to get an older  rsync  to  list  a  single  directory  without
              recursing.

       --ll,, ----lliinnkkss
              When symlinks are encountered, recreate the symlink on the destination.

       --LL,, ----ccooppyy--lliinnkkss
              When  symlinks  are  encountered, the item that they point to (the referent) is copied, rather than
              the symlink.  In older versions of rsync, this option also  had  the  side-effect  of  telling  the
              receiving side to follow symlinks, such as symlinks to directories.  In a modern rsync such as this
              one, you’ll need to specify ----kkeeeepp--ddiirrlliinnkkss (--KK) to get this extra behavior.  The only exception is
              when sending files to an rsync that is too old to understand --KK -- in that case, the --LL option will
              still have the side-effect of --KK on that older receiving rsync.

       ----ccooppyy--uunnssaaffee--lliinnkkss
              This tells rsync to copy the referent of symbolic links that point outside the copied tree.   Abso‐
              lute  symlinks  are  also  treated  like ordinary files, and so are any symlinks in the source path
              itself when ----rreellaattiivvee is used.  This option has no additional  effect  if  ----ccooppyy--lliinnkkss  was  also
              specified.

       ----ssaaffee--lliinnkkss
              This  tells  rsync  to  ignore any symbolic links which point outside the copied tree. All absolute
              symlinks are also ignored. Using this option in conjunction with  ----rreellaattiivvee  may  give  unexpected
              results.

       ----mmuunnggee--lliinnkkss
              This  option  tells rsync to (1) modify all symlinks on the receiving side in a way that makes them
              unusable but recoverable (see below), or (2) to unmunge symlinks on the sending side that had  been
              stored  in  a  munged state.  This is useful if you don’t quite trust the source of the data to not
              try to slip in a symlink to a unexpected place.

              The way rsync disables the use of symlinks is to prefix each one with the string "/rsyncd-munged/".
              This prevents the links from being used as long as that directory does not exist.  When this option
              is enabled, rsync will refuse to run if that path is a directory or a symlink to a directory.

              The option only affects the client side of the transfer, so if you need it to  affect  the  server,
              specify it via ----rreemmoottee--ooppttiioonn.  (Note that in a local transfer, the client side is the sender.)

              This option has no affect on a daemon, since the daemon configures whether it wants munged symlinks
              via its "munge symlinks" parameter.  See also the  "munge-symlinks"  perl  script  in  the  support
              directory of the source code.

       --kk,, ----ccooppyy--ddiirrlliinnkkss
              This  option  causes  the  sending  side to treat a symlink to a directory as though it were a real
              directory.  This is useful if you don’t want symlinks to non-directories to be  affected,  as  they
              would be using ----ccooppyy--lliinnkkss.

              Without  this  option,  if the sending side has replaced a directory with a symlink to a directory,
              the receiving side will delete anything that is in the way of the new symlink, including  a  direc‐
              tory hierarchy (as long as ----ffoorrccee or ----ddeelleettee is in effect).

              See also ----kkeeeepp--ddiirrlliinnkkss for an analogous option for the receiving side.

              ----ccooppyy--ddiirrlliinnkkss applies to all symlinks to directories in the source.  If you want to follow only a
              few specified symlinks, a trick you can use is to pass them as additional source args with a trail‐
              ing slash, using ----rreellaattiivvee to make the paths match up right.  For example:

              rsync -r --relative src/./ src/./follow-me/ dest/


              This  works  because  rsync calls llssttaatt(2) on the source arg as given, and the trailing slash makes
              llssttaatt(2) follow the symlink, giving rise to a directory in the file-list which overrides  the  sym‐
              link found during the scan of "src/./".

       --KK,, ----kkeeeepp--ddiirrlliinnkkss
              This  option  causes  the receiving side to treat a symlink to a directory as though it were a real
              directory, but only if it matches a real directory from  the  sender.   Without  this  option,  the
              receiver’s symlink would be deleted and replaced with a real directory.

              For  example,  suppose  you  transfer a directory "foo" that contains a file "file", but "foo" is a
              symlink to directory "bar" on the receiver.  Without ----kkeeeepp--ddiirrlliinnkkss, the receiver deletes  symlink
              "foo",  recreates  it  as  a  directory,  and  receives  the  file  into  the  new directory.  With
              ----kkeeeepp--ddiirrlliinnkkss, the receiver keeps the symlink and "file" ends up in "bar".

              One note of caution:  if you use ----kkeeeepp--ddiirrlliinnkkss, you must trust all the symlinks in the copy!   If
              it  is  possible for an untrusted user to create their own symlink to any directory, the user could
              then (on a subsequent copy) replace the symlink with a real directory and  affect  the  content  of
              whatever  directory  the symlink references.  For backup copies, you are better off using something
              like a bind mount instead of a symlink to modify your receiving hierarchy.

              See also ----ccooppyy--ddiirrlliinnkkss for an analogous option for the sending side.

       --HH,, ----hhaarrdd--lliinnkkss
              This tells rsync to look for hard-linked files in the source and link  together  the  corresponding
              files  on  the  destination.   Without  this option, hard-linked files in the source are treated as
              though they were separate files.

              This option does NOT necessarily ensure that the pattern of hard links on the  destination  exactly
              matches  that  on  the  source.   Cases  in  which the destination may end up with extra hard links
              include the following:

              o      If the destination contains extraneous hard-links (more linking than what is present in  the
                     source file list), the copying algorithm will not break them explicitly.  However, if one or
                     more of the paths have content differences, the normal file-update process will break  those
                     extra links (unless you are using the ----iinnppllaaccee option).

              o      If you specify a ----lliinnkk--ddeesstt directory that contains hard links, the linking of the destina‐
                     tion files against the ----lliinnkk--ddeesstt files can cause some paths in the destination  to  become
                     linked together due to the ----lliinnkk--ddeesstt associations.


              Note  that  rsync  can  only  detect hard links between files that are inside the transfer set.  If
              rsync updates a file that has extra hard-link connections to files outside the transfer, that link‐
              age will be broken.  If you are tempted to use the ----iinnppllaaccee option to avoid this breakage, be very
              careful that you know how your files are being updated so that you are certain that  no  unintended
              changes happen due to lingering hard links (and see the ----iinnppllaaccee option for more caveats).

              If incremental recursion is active (see ----rreeccuurrssiivvee), rsync may transfer a missing hard-linked file
              before it finds that another link for that contents exists elsewhere in the hierarchy.   This  does
              not affect the accuracy of the transfer (i.e. which files are hard-linked together), just its effi‐
              ciency (i.e. copying the data for a new, early copy of a hard-linked  file  that  could  have  been
              found  later  in the transfer in another member of the hard-linked set of files).  One way to avoid
              this inefficiency is to disable incremental recursion using the ----nnoo--iinncc--rreeccuurrssiivvee option.

       --pp,, ----ppeerrmmss
              This option causes the receiving rsync to set the destination permissions to be  the  same  as  the
              source  permissions.   (See  also the ----cchhmmoodd option for a way to modify what rsync considers to be
              the source permissions.)

              When this option is _o_f_f, permissions are set as follows:

              o      Existing files (including updated files)  retain  their  existing  permissions,  though  the
                     ----eexxeeccuuttaabbiilliittyy option might change just the execute permission for the file.

              o      New  files  get  their  "normal" permission bits set to the source file’s permissions masked
                     with the receiving directory’s default permissions (either the receiving process’s umask, or
                     the  permissions  specified  via the destination directory’s default ACL), and their special
                     permission bits disabled except in the case where a new directory inherits a setgid bit from
                     its parent directory.


              Thus,  when  ----ppeerrmmss and ----eexxeeccuuttaabbiilliittyy are both disabled, rsync’s behavior is the same as that of
              other file-copy utilities, such as ccpp(1) and ttaarr(1).

              In summary: to give destination files (both old and new) the source permissions, use  ----ppeerrmmss.   To
              give  new  files the destination-default permissions (while leaving existing files unchanged), make
              sure that the ----ppeerrmmss option is off and use ----cchhmmoodd==uuggoo==rrwwXX (which ensures that all non-masked bits
              get  enabled).   If you’d care to make this latter behavior easier to type, you could define a popt
              alias for it, such as putting this line in the file ~/.popt (the following defines the  --ZZ  option,
              and includes --no-g to use the default group of the destination dir):

                 rsync alias -Z --no-p --no-g --chmod=ugo=rwX


              You could then use this new option in a command such as this one:

                 rsync -avZ src/ dest/


              (Caveat:  make  sure that --aa does not follow --ZZ, or it will re-enable the two "--no-*" options men‐
              tioned above.)

              The preservation of the destination’s setgid bit on newly-created directories when ----ppeerrmmss  is  off
              was  added in rsync 2.6.7.  Older rsync versions erroneously preserved the three special permission
              bits for newly-created files when ----ppeerrmmss was off, while overriding the  destination’s  setgid  bit
              setting  on a newly-created directory.  Default ACL observance was added to the ACL patch for rsync
              2.6.7, so older (or non-ACL-enabled) rsyncs use the umask even if default ACLs are present.   (Keep
              in mind that it is the version of the receiving rsync that affects these behaviors.)

       --EE,, ----eexxeeccuuttaabbiilliittyy
              This option causes rsync to preserve the executability (or non-executability) of regular files when
              ----ppeerrmmss is not enabled.  A regular file is considered to be executable  if  at  least  one  ’x’  is
              turned  on in its permissions.  When an existing destination file’s executability differs from that
              of the corresponding source file, rsync modifies the destination file’s permissions as follows:

              o      To make a file non-executable, rsync turns off all its ’x’ permissions.

              o      To make a file executable, rsync turns on each ’x’ permission that has a  corresponding  ’r’
                     permission enabled.


              If ----ppeerrmmss is enabled, this option is ignored.

       --AA,, ----aaccllss
              This  option  causes  rsync  to update the destination ACLs to be the same as the source ACLs.  The
              option also implies ----ppeerrmmss.

              The source and destination systems must have compatible ACL entries for this option to  work  prop‐
              erly.  See the ----ffaakkee--ssuuppeerr option for a way to backup and restore ACLs that are not compatible.

       --XX,, ----xxaattttrrss
              This option causes rsync to update the destination extended attributes to be the same as the source
              ones.

              For systems that support extended-attribute namespaces, a copy being done by  a  super-user  copies
              all  namespaces  except  system.*.   A normal user only copies the user.* namespace.  To be able to
              backup and restore non-user namespaces as a normal user, see the ----ffaakkee--ssuuppeerr option.

              Note that this option does not copy rsyncs special xattr values (e.g. those used  by  ----ffaakkee--ssuuppeerr)
              unless  you  repeat  the  option  (e.g.  -XX).   This  "copy  all  xattrs" mode cannot be used with
              ----ffaakkee--ssuuppeerr.

       ----cchhmmoodd
              This option tells rsync to apply one or more comma-separated "chmod" modes to the permission of the
              files  in  the transfer.  The resulting value is treated as though it were the permissions that the
              sending side supplied for the file, which means that this option can seem  to  have  no  effect  on
              existing files if ----ppeerrmmss is not enabled.

              In  addition to the normal parsing rules specified in the cchhmmoodd(1) manpage, you can specify an item
              that should only apply to a directory by prefixing it with a ’D’, or specify an  item  that  should
              only  apply  to a file by prefixing it with a ’F’.  For example, the following will ensure that all
              directories get marked set-gid, that no files are other-writable, that both are  user-writable  and
              group-writable, and that both have consistent executability across all bits:

              --chmod=Dg+s,ug+w,Fo-w,+X


              Using octal mode numbers is also allowed:

              --chmod=D2775,F664


              It is also legal to specify multiple ----cchhmmoodd options, as each additional option is just appended to
              the list of changes to make.

              See the ----ppeerrmmss and ----eexxeeccuuttaabbiilliittyy options for how the resulting permission value can  be  applied
              to the files in the transfer.

       --oo,, ----oowwnneerr
              This  option  causes  rsync  to  set the owner of the destination file to be the same as the source
              file, but only if the receiving rsync is being run as the super-user  (see  also  the  ----ssuuppeerr  and
              ----ffaakkee--ssuuppeerr  options).   Without this option, the owner of new and/or transferred files are set to
              the invoking user on the receiving side.

              The preservation of ownership will associate matching names by default, but may fall back to  using
              the ID number in some circumstances (see also the ----nnuummeerriicc--iiddss option for a full discussion).

       --gg,, ----ggrroouupp
              This  option  causes  rsync  to  set the group of the destination file to be the same as the source
              file.  If the receiving program is not running as the super-user (or if ----nnoo--ssuuppeerr was  specified),
              only groups that the invoking user on the receiving side is a member of will be preserved.  Without
              this option, the group is set to the default group of the invoking user on the receiving side.

              The preservation of group information will associate matching names by default, but may  fall  back
              to  using the ID number in some circumstances (see also the ----nnuummeerriicc--iiddss option for a full discus‐
              sion).

       ----ddeevviicceess
              This option causes rsync to transfer character and block device  files  to  the  remote  system  to
              recreate  these  devices.   This  option  has  no  effect  if the receiving rsync is not run as the
              super-user (see also the ----ssuuppeerr and ----ffaakkee--ssuuppeerr options).

       ----ssppeecciiaallss
              This option causes rsync to transfer special files such as named sockets and fifos.

       --DD     The --DD option is equivalent to ----ddeevviicceess ----ssppeecciiaallss.

       --tt,, ----ttiimmeess
              This tells rsync to transfer modification times along with the files and update them on the  remote
              system.   Note  that if this option is not used, the optimization that excludes files that have not
              been modified cannot be effective; in other words, a missing --tt or --aa will cause the next  transfer
              to  behave  as  if it used --II, causing all files to be updated (though rsync’s delta-transfer algo‐
              rithm will make the update fairly efficient if the files haven’t actually changed, you’re much bet‐
              ter off using --tt).

       --OO,, ----oommiitt--ddiirr--ttiimmeess
              This  tells  rsync  to omit directories when it is preserving modification times (see ----ttiimmeess).  If
              NFS is sharing the directories on the receiving side, it is a good idea to use --OO.  This option  is
              inferred if you use ----bbaacckkuupp without ----bbaacckkuupp--ddiirr.

       --JJ,, ----oommiitt--lliinnkk--ttiimmeess
              This tells rsync to omit symlinks when it is preserving modification times (see ----ttiimmeess).

       ----ssuuppeerr
              This  tells  the receiving side to attempt super-user activities even if the receiving rsync wasn’t
              run by the super-user.  These activities include: preserving users via the ----oowwnneerr option, preserv‐
              ing  all  groups  (not just the current user’s groups) via the ----ggrroouuppss option, and copying devices
              via the ----ddeevviicceess option.  This is useful for systems that allow such activities without being  the
              super-user, and also for ensuring that you will get errors if the receiving side isn’t being run as
              the super-user.  To turn off super-user activities, the super-user can use ----nnoo--ssuuppeerr.

       ----ffaakkee--ssuuppeerr
              When this option is enabled, rsync simulates super-user activities by saving/restoring  the  privi‐
              leged  attributes via special extended attributes that are attached to each file (as needed).  This
              includes the file’s owner and group (if it is not the default), the file’s device  info  (device  &
              special  files  are created as empty text files), and any permission bits that we won’t allow to be
              set on the real file (e.g.  the real file gets u-s,g-s,o-t for safety)  or  that  would  limit  the
              owner’s  access (since the real super-user can always access/change a file, the files we create can
              always be accessed/changed by the creating user).  This option also handles  ACLs  (if  ----aaccllss  was
              specified) and non-user extended attributes (if ----xxaattttrrss was specified).

              This  is  a good way to backup data without using a super-user, and to store ACLs from incompatible
              systems.

              The ----ffaakkee--ssuuppeerr option only affects the side where the option is used.  To affect the remote  side
              of a remote-shell connection, use the ----rreemmoottee--ooppttiioonn (--MM) option:

                rsync -av -M--fake-super /src/ host:/dest/


              For  a  local  copy,  this option affects both the source and the destination.  If you wish a local
              copy to enable this option just for the destination files, specify --MM----ffaakkee--ssuuppeerr.  If you  wish  a
              local copy to enable this option just for the source files, combine ----ffaakkee--ssuuppeerr with --MM----ssuuppeerr.

              This option is overridden by both ----ssuuppeerr and ----nnoo--ssuuppeerr.

              See also the "fake super" setting in the daemon’s rsyncd.conf file.

       --SS,, ----ssppaarrssee
              Try  to  handle  sparse files efficiently so they take up less space on the destination.  Conflicts
              with ----iinnppllaaccee because it’s not possible to overwrite data in a sparse fashion.

       ----pprreeaallllooccaattee
              This tells the receiver to allocate each destination file to its eventual size before writing  data
              to  the  file.   Rsync  will  only  use the real filesystem-level preallocation support provided by
              Linux’s ffaallllooccaattee(2) system call or Cygwin’s ppoossiixx__ffaallllooccaattee(3), not the slow glibc  implementation
              that writes a zero byte into each block.

              Without  this  option, larger files may not be entirely contiguous on the filesystem, but with this
              option rsync will probably copy more slowly.   If  the  destination  is  not  an  extent-supporting
              filesystem (such as ext4, xfs, NTFS, etc.), this option may have no positive effect at all.

       --nn,, ----ddrryy--rruunn
              This  makes  rsync  perform a trial run that doesn’t make any changes (and produces mostly the same
              output as a real run).  It is most commonly used in combination with the --vv,, ----vveerrbboossee  and/or  --ii,,
              ----iitteemmiizzee--cchhaannggeess options to see what an rsync command is going to do before one actually runs it.

              The  output  of  ----iitteemmiizzee--cchhaannggeess is supposed to be exactly the same on a dry run and a subsequent
              real run (barring intentional trickery and system call failures); if it isn’t, that’s a bug.  Other
              output  should be mostly unchanged, but may differ in some areas.  Notably, a dry run does not send
              the actual data for file  transfers,  so  ----pprrooggrreessss  has  no  effect,  the  "bytes  sent",  "bytes
              received",  "literal data", and "matched data" statistics are too small, and the "speedup" value is
              equivalent to a run where no file transfers were needed.

       --WW,, ----wwhhoollee--ffiillee
              With this option rsync’s delta-transfer algorithm is not used and the  whole  file  is  sent  as-is
              instead.   The  transfer may be faster if this option is used when the bandwidth between the source
              and destination machines is higher than the bandwidth to disk (especially when the "disk" is  actu‐
              ally  a networked filesystem).  This is the default when both the source and destination are speci‐
              fied as local paths, but only if no batch-writing option is in effect.

       --xx,, ----oonnee--ffiillee--ssyysstteemm
              This tells rsync to avoid crossing a filesystem boundary when recursing.  This does not  limit  the
              user’s  ability  to specify items to copy from multiple filesystems, just rsync’s recursion through
              the hierarchy of each directory that the user specified, and also the analogous  recursion  on  the
              receiving  side  during  deletion.   Also keep in mind that rsync treats a "bind" mount to the same
              device as being on the same filesystem.

              If this option is repeated, rsync omits all mount-point directories from the copy.   Otherwise,  it
              includes  an empty directory at each mount-point it encounters (using the attributes of the mounted
              directory because those of the underlying mount-point directory are inaccessible).

              If rsync has been told to collapse symlinks (via ----ccooppyy--lliinnkkss or ----ccooppyy--uunnssaaffee--lliinnkkss), a symlink to
              a directory on another device is treated like a mount-point.  Symlinks to non-directories are unaf‐
              fected by this option.

       ----eexxiissttiinngg,, ----iiggnnoorree--nnoonn--eexxiissttiinngg
              This tells rsync to skip creating files (including directories) that do not exist yet on the desti‐
              nation.   If  this  option  is combined with the ----iiggnnoorree--eexxiissttiinngg option, no files will be updated
              (which can be useful if all you want to do is delete extraneous files).

              This option is a transfer rule, not an exclude, so it doesn’t affect the data that  goes  into  the
              file-lists,  and  thus  it  doesn’t  affect  deletions.  It just limits the files that the receiver
              requests to be transferred.

       ----iiggnnoorree--eexxiissttiinngg
              This tells rsync to skip updating files that already exist on the destination (this does _n_o_t ignore
              existing directories, or nothing would get done).  See also ----eexxiissttiinngg.

              This  option  is  a transfer rule, not an exclude, so it doesn’t affect the data that goes into the
              file-lists, and thus it doesn’t affect deletions.  It just  limits  the  files  that  the  receiver
              requests to be transferred.

              This  option  can  be useful for those doing backups using the ----lliinnkk--ddeesstt option when they need to
              continue a backup run that got interrupted.  Since a ----lliinnkk--ddeesstt run is copied into a new directory
              hierarchy  (when it is used properly), using ----iiggnnoorree eexxiissttiinngg will ensure that the already-handled
              files don’t get tweaked (which avoids a change in permissions on the hard-linked files).  This does
              mean that this option is only looking at the existing files in the destination hierarchy itself.

       ----rreemmoovvee--ssoouurrccee--ffiilleess
              This  tells  rsync  to  remove from the sending side the files (meaning non-directories) that are a
              part of the transfer and have been successfully duplicated on the receiving side.

              Note that you should only use this option on source files that are quiescent.   If  you  are  using
              this  to move files that show up in a particular directory over to another host, make sure that the
              finished files get renamed into the source directory, not directly written into it, so  that  rsync
              can’t  possibly  transfer a file that is not yet fully written.  If you can’t first write the files
              into a different directory, you should use a naming idiom that lets rsync avoid transferring  files
              that are not yet finished (e.g. name the file "foo.new" when it is written, rename it to "foo" when
              it is done, and then use the option ----eexxcclluuddee==''**..nneeww'' for the rsync transfer).

              Starting with 3.1.0, rsync will skip the sender-side removal (and output an error)  if  the  file’s
              size or modify time has not stayed unchanged.

       ----ddeelleettee
              This  tells rsync to delete extraneous files from the receiving side (ones that aren’t on the send‐
              ing side), but only for the directories that are being synchronized.  You must have asked rsync  to
              send  the  whole directory (e.g. "dir" or "dir/") without using a wildcard for the directory’s con‐
              tents (e.g. "dir/*") since the wildcard is expanded by the shell and rsync thus gets a  request  to
              transfer  individual  files,  not  the  files’  parent directory.  Files that are excluded from the
              transfer are also excluded from being deleted unless you use the ----ddeelleettee--eexxcclluuddeedd option  or  mark
              the  rules  as  only  matching on the sending side (see the include/exclude modifiers in the FILTER
              RULES section).

              Prior to rsync 2.6.7, this option would have no effect unless ----rreeccuurrssiivvee was  enabled.   Beginning
              with  2.6.7,  deletions will also occur when ----ddiirrss (--dd) is enabled, but only for directories whose
              contents are being copied.

              This option can be dangerous if used incorrectly!  It is a very good idea to first try a run  using
              the ----ddrryy--rruunn option (--nn) to see what files are going to be deleted.

              If  the sending side detects any I/O errors, then the deletion of any files at the destination will
              be automatically disabled. This is to prevent temporary filesystem failures (such as NFS errors) on
              the  sending  side  from  causing a massive deletion of files on the destination.  You can override
              this with the ----iiggnnoorree--eerrrroorrss option.

              The ----ddeelleettee option may be combined with one of the --delete-WHEN options without conflict, as well
              as  ----ddeelleettee--eexxcclluuddeedd.   However,  if  none  of the --delete-WHEN options are specified, rsync will
              choose the ----ddeelleettee--dduurriinngg algorithm when talking to rsync 3.0.0 or newer, and the  ----ddeelleettee--bbeeffoorree
              algorithm when talking to an older rsync.  See also ----ddeelleettee--ddeellaayy and ----ddeelleettee--aafftteerr.

       ----ddeelleettee--bbeeffoorree
              Request  that  the  file-deletions  on  the receiving side be done before the transfer starts.  See
              ----ddeelleettee (which is implied) for more details on file-deletion.

              Deleting before the transfer is helpful if the filesystem is tight for space and removing  extrane‐
              ous  files would help to make the transfer possible.  However, it does introduce a delay before the
              start of the transfer, and this delay might cause the transfer to timeout (if ----ttiimmeeoouutt was  speci‐
              fied).   It  also  forces  rsync  to use the old, non-incremental recursion algorithm that requires
              rsync to scan all the files in the transfer into memory at once (see ----rreeccuurrssiivvee).

       ----ddeelleettee--dduurriinngg,, ----ddeell
              Request that the file-deletions on the receiving side be done incrementally as  the  transfer  hap‐
              pens.  The per-directory delete scan is done right before each directory is checked for updates, so
              it behaves like a more efficient ----ddeelleettee--bbeeffoorree,  including  doing  the  deletions  prior  to  any
              per-directory filter files being updated.  This option was first added in rsync version 2.6.4.  See
              ----ddeelleettee (which is implied) for more details on file-deletion.

       ----ddeelleettee--ddeellaayy
              Request that the file-deletions on the  receiving  side  be  computed  during  the  transfer  (like
              ----ddeelleettee--dduurriinngg), and then removed after the transfer completes.  This is useful when combined with
              ----ddeellaayy--uuppddaatteess and/or ----ffuuzzzzyy, and is more efficient than using  ----ddeelleettee--aafftteerr  (but  can  behave
              differently,  since  ----ddeelleettee--aafftteerr computes the deletions in a separate pass after all updates are
              done).  If the number of removed files overflows an internal buffer, a temporary file will be  cre‐
              ated  on  the  receiving  side to hold the names (it is removed while open, so you shouldn’t see it
              during the transfer).  If the creation of the temporary file fails, rsync will try to fall back  to
              using  ----ddeelleettee--aafftteerr  (which  it  cannot  do  if  ----rreeccuurrssiivvee  is doing an incremental scan).  See
              ----ddeelleettee (which is implied) for more details on file-deletion.

       ----ddeelleettee--aafftteerr
              Request that the file-deletions on the receiving side be done after  the  transfer  has  completed.
              This  is  useful if you are sending new per-directory merge files as a part of the transfer and you
              want their exclusions to take effect for the delete phase of the current transfer.  It also  forces
              rsync to use the old, non-incremental recursion algorithm that requires rsync to scan all the files
              in the transfer into memory at once (see ----rreeccuurrssiivvee).  See ----ddeelleettee (which is  implied)  for  more
              details on file-deletion.

       ----ddeelleettee--eexxcclluuddeedd
              In  addition  to  deleting  the  files on the receiving side that are not on the sending side, this
              tells rsync to also delete any files on the receiving side that are excluded (see ----eexxcclluuddee).   See
              the  FILTER  RULES section for a way to make individual exclusions behave this way on the receiver,
              and for a way to protect files from ----ddeelleettee--eexxcclluuddeedd.  See ----ddeelleettee (which is  implied)  for  more
              details on file-deletion.

       ----iiggnnoorree--mmiissssiinngg--aarrggss
              When  rsync  is first processing the explicitly requested source files (e.g. command-line arguments
              or ----ffiilleess--ffrroomm entries), it is normally an error if the file cannot be found.   This  option  sup‐
              presses  that  error,  and does not try to transfer the file.  This does not affect subsequent van‐
              ished-file errors if a file was initially found to be present and later is no longer there.

       ----ddeelleettee--mmiissssiinngg--aarrggss
              This option takes the behavior of (the implied) ----iiggnnoorree--mmiissssiinngg--aarrggss option a step farther:   each
              missing  arg  will become a deletion request of the corresponding destination file on the receiving
              side (should it exist).  If the destination file is a non-empty directory, it will only be success‐
              fully deleted if --force or --delete are in effect.  Other than that, this option is independent of
              any other type of delete processing.

              The missing source files are represented by special file-list entries which display as a "*missing"
              entry in the ----lliisstt--oonnllyy output.

       ----iiggnnoorree--eerrrroorrss
              Tells ----ddeelleettee to go ahead and delete files even when there are I/O errors.

       ----ffoorrccee
              This  option  tells rsync to delete a non-empty directory when it is to be replaced by a non-direc‐
              tory.  This is only relevant if deletions are not active (see ----ddeelleettee for details).

              Note for older rsync versions: ----ffoorrccee used to still be required when using ----ddeelleettee--aafftteerr, and  it
              used to be non-functional unless the ----rreeccuurrssiivvee option was also enabled.

       ----mmaaxx--ddeelleettee==NNUUMM
              This  tells rsync not to delete more than NUM files or directories.  If that limit is exceeded, all
              further deletions are skipped through the end of the transfer.  At the end, rsync outputs a warning
              (including  a  count of the skipped deletions) and exits with an error code of 25 (unless some more
              important error condition also occurred).

              Beginning with version 3.0.0, you may specify ----mmaaxx--ddeelleettee==00 to  be  warned  about  any  extraneous
              files  in  the destination without removing any of them.  Older clients interpreted this as "unlim‐
              ited", so  if  you  don’t  know  what  version  the  client  is,  you  can  use  the  less  obvious
              ----mmaaxx--ddeelleettee==--11 as a backward-compatible way to specify that no deletions be allowed (though really
              old versions didn’t warn when the limit was exceeded).

       ----mmaaxx--ssiizzee==SSIIZZEE
              This tells rsync to avoid transferring any file that is larger than the specified  SIZE.  The  SIZE
              value  can  be  suffixed with a string to indicate a size multiplier, and may be a fractional value
              (e.g. "----mmaaxx--ssiizzee==11..55mm").

              This option is a transfer rule, not an exclude, so it doesn’t affect the data that  goes  into  the
              file-lists,  and  thus  it  doesn’t  affect  deletions.  It just limits the files that the receiver
              requests to be transferred.

              The suffixes are as follows: "K" (or "KiB") is a kibibyte (1024), "M"  (or  "MiB")  is  a  mebibyte
              (1024*1024),  and  "G" (or "GiB") is a gibibyte (1024*1024*1024).  If you want the multiplier to be
              1000 instead of 1024, use "KB", "MB", or "GB".  (Note: lower-case is also accepted for all values.)
              Finally,  if  the  suffix  ends in either "+1" or "-1", the value will be offset by one byte in the
              indicated direction.

              Examples: --max-size=1.5mb-1 is 1499999 bytes, and --max-size=2g+1 is 2147483649 bytes.

              Note that rsync versions prior to 3.1.0 did not allow ----mmaaxx--ssiizzee==00.

       ----mmiinn--ssiizzee==SSIIZZEE
              This tells rsync to avoid transferring any file that is smaller than the specified SIZE, which  can
              help  in  not  transferring small, junk files.  See the ----mmaaxx--ssiizzee option for a description of SIZE
              and other information.

              Note that rsync versions prior to 3.1.0 did not allow ----mmiinn--ssiizzee==00.

       --BB,, ----bblloocckk--ssiizzee==BBLLOOCCKKSSIIZZEE
              This forces the block size used in rsync’s delta-transfer algorithm to a fixed value.  It  is  nor‐
              mally selected based on the size of each file being updated.  See the technical report for details.

       --ee,, ----rrsshh==CCOOMMMMAANNDD
              This  option  allows  you  to  choose  an alternative remote shell program to use for communication
              between the local and remote copies of rsync. Typically, rsync is configured to use ssh by default,
              but you may prefer to use rsh on a local network.

              If this option is used with [[uusseerr@@]]hhoosstt::::mmoodduullee//ppaatthh, then the remote shell _C_O_M_M_A_N_D will be used to
              run an rsync daemon on the remote host, and all data will be transmitted through that remote  shell
              connection,  rather than through a direct socket connection to a running rsync daemon on the remote
              host.  See the section "USING RSYNC-DAEMON FEATURES VIA A REMOTE-SHELL CONNECTION" above.

              Command-line arguments are permitted in COMMAND provided that COMMAND is presented to  rsync  as  a
              single  argument.   You  must use spaces (not tabs or other whitespace) to separate the command and
              args from each other, and you can use single- and/or double-quotes to preserve spaces in  an  argu‐
              ment  (but not backslashes).  Note that doubling a single-quote inside a single-quoted string gives
              you a single-quote; likewise for double-quotes (though you need to pay attention  to  which  quotes
              your shell is parsing and which quotes rsync is parsing).  Some examples:

                  -e 'ssh -p 2234'
                  -e 'ssh -o "ProxyCommand nohup ssh firewall nc -w1 %h %p"'


              (Note  that  ssh users can alternately customize site-specific connect options in their .ssh/config
              file.)

              You can also choose the remote shell  program  using  the  RSYNC_RSH  environment  variable,  which
              accepts the same range of values as --ee.

              See also the ----bblloocckkiinngg--iioo option which is affected by this option.

       ----rrssyynncc--ppaatthh==PPRROOGGRRAAMM
              Use  this to specify what program is to be run on the remote machine to start-up rsync.  Often used
              when rsync is not in the  default  remote-shell’s  path  (e.g.  --rsync-path=/usr/local/bin/rsync).
              Note  that  PROGRAM  is  run with the help of a shell, so it can be any program, script, or command
              sequence you’d care to run, so long as it does not corrupt  the  standard-in  &  standard-out  that
              rsync is using to communicate.

              One  tricky  example is to set a different default directory on the remote machine for use with the
              ----rreellaattiivvee option.  For instance:

                  rsync -avR --rsync-path="cd /a/b && rsync" host:c/d /e/


       --MM,, ----rreemmoottee--ooppttiioonn==OOPPTTIIOONN
              This option is used for more advanced situations where you want certain effects to  be  limited  to
              one  side of the transfer only.  For instance, if you want to pass ----lloogg--ffiillee==FFIILLEE and ----ffaakkee--ssuuppeerr
              to the remote system, specify it like this:

                  rsync -av -M --log-file=foo -M--fake-super src/ dest/


              If you want to have an option affect only the local side of a transfer  when  it  normally  affects
              both sides, send its negation to the remote side.  Like this:

                  rsync -av -x -M--no-x src/ dest/


              Be  cautious using this, as it is possible to toggle an option that will cause rsync to have a dif‐
              ferent idea about what data to expect next over the socket, and that will make it fail in a cryptic
              fashion.

              Note  that  it  is  best  to use a separate ----rreemmoottee--ooppttiioonn for each option you want to pass.  This
              makes your useage compatible with the ----pprrootteecctt--aarrggss option.  If that option is off, any spaces  in
              your remote options will be split by the remote shell unless you take steps to protect them.

              When  performing  a  local  transfer,  the  "local" side is the sender and the "remote" side is the
              receiver.

              Note some versions of the popt option-parsing library have a bug in them  that  prevents  you  from
              using   an   adjacent   arg   with   an   equal   in  it  next  to  a  short  option  letter  (e.g.
              -M--log-file=/tmp/foo.  If this bug affects your version of popt, you can use the version  of  popt
              that is included with rsync.

       --CC,, ----ccvvss--eexxcclluuddee
              This is a useful shorthand for excluding a broad range of files that you often don’t want to trans‐
              fer between systems. It uses a similar algorithm to CVS to determine if a file should be ignored.

              The exclude list is initialized to exclude the following items (these initial items are  marked  as
              perishable -- see the FILTER RULES section):

                     RCS  SCCS CVS CVS.adm RCSLOG cvslog.* tags TAGS .make.state .nse_depinfo *~ #* .#* ,* _$* *$
                     *.old *.bak *.BAK *.orig *.rej .del-* *.a *.olb *.o *.obj *.so *.exe  *.Z  *.elc  *.ln  core
                     .svn/ .git/ .hg/ .bzr/


              then,  files  listed in a $HOME/.cvsignore are added to the list and any files listed in the CVSIG‐
              NORE environment variable (all cvsignore names are delimited by whitespace).

              Finally, any file is ignored if it is in the same directory as a .cvsignore file and matches one of
              the  patterns  listed  therein.   Unlike  rsync’s filter/exclude files, these patterns are split on
              whitespace.  See the ccvvss(1) manual for more information.

              If you’re combining --CC with your own ----ffiilltteerr rules, you should note that these  CVS  excludes  are
              appended  at  the end of your own rules, regardless of where the --CC was placed on the command-line.
              This makes them a lower priority than any rules you specified explicitly.  If you want  to  control
              where  these  CVS  excludes  get  inserted into your filter rules, you should omit the --CC as a com‐
              mand-line option and use a combination of ----ffiilltteerr==::CC and ----ffiilltteerr==--CC (either on your  command-line
              or  by putting the ":C" and "-C" rules into a filter file with your other rules).  The first option
              turns on the per-directory scanning for the .cvsignore file.  The second  option  does  a  one-time
              import of the CVS excludes mentioned above.

       --ff,, ----ffiilltteerr==RRUULLEE
              This  option allows you to add rules to selectively exclude certain files from the list of files to
              be transferred. This is most useful in combination with a recursive transfer.

              You may use as many ----ffiilltteerr options on the command line as you like to build up the list of  files
              to  exclude.   If  the  filter contains whitespace, be sure to quote it so that the shell gives the
              rule to rsync as a single argument.  The text below also mentions that you can use an underscore to
              replace the space that separates a rule from its arg.

              See the FILTER RULES section for detailed information on this option.

       --FF     The  --FF  option is a shorthand for adding two ----ffiilltteerr rules to your command.  The first time it is
              used is a shorthand for this rule:

                 --filter='dir-merge /.rsync-filter'


              This tells rsync to look for per-directory .rsync-filter files that have been sprinkled through the
              hierarchy  and  use  their  rules  to filter the files in the transfer.  If --FF is repeated, it is a
              shorthand for this rule:

                 --filter='exclude .rsync-filter'


              This filters out the .rsync-filter files themselves from the transfer.

              See the FILTER RULES section for detailed information on how these options work.

       ----eexxcclluuddee==PPAATTTTEERRNN
              This option is a simplified form of the ----ffiilltteerr option that defaults to an exclude rule  and  does
              not allow the full rule-parsing syntax of normal filter rules.

              See the FILTER RULES section for detailed information on this option.

       ----eexxcclluuddee--ffrroomm==FFIILLEE
              This  option is related to the ----eexxcclluuddee option, but it specifies a FILE that contains exclude pat‐
              terns (one per line).  Blank lines in the file and lines starting with ’;’ or ’#’ are ignored.   If
              _F_I_L_E is --, the list will be read from standard input.

       ----iinncclluuddee==PPAATTTTEERRNN
              This  option  is a simplified form of the ----ffiilltteerr option that defaults to an include rule and does
              not allow the full rule-parsing syntax of normal filter rules.

              See the FILTER RULES section for detailed information on this option.

       ----iinncclluuddee--ffrroomm==FFIILLEE
              This option is related to the ----iinncclluuddee option, but it specifies a FILE that contains include  pat‐
              terns  (one per line).  Blank lines in the file and lines starting with ’;’ or ’#’ are ignored.  If
              _F_I_L_E is --, the list will be read from standard input.

       ----ffiilleess--ffrroomm==FFIILLEE
              Using this option allows you to specify the exact list of files to transfer (as read from the spec‐
              ified  FILE  or -- for standard input).  It also tweaks the default behavior of rsync to make trans‐
              ferring just the specified files and directories easier:

              o      The ----rreellaattiivvee (--RR) option is implied, which preserves the path information that  is  speci‐
                     fied for each item in the file (use ----nnoo--rreellaattiivvee or ----nnoo--RR if you want to turn that off).

              o      The  ----ddiirrss  (--dd)  option is implied, which will create directories specified in the list on
                     the destination rather than noisily skipping them (use ----nnoo--ddiirrss or ----nnoo--dd if  you  want  to
                     turn that off).

              o      The  ----aarrcchhiivvee (--aa) option’s behavior does not imply ----rreeccuurrssiivvee (--rr), so specify it explic‐
                     itly, if you want it.

              o      These side-effects change the default state of rsync, so the position  of  the  ----ffiilleess--ffrroomm
                     option on the command-line has no bearing on how other options are parsed (e.g. --aa works the
                     same before or after ----ffiilleess--ffrroomm, as does ----nnoo--RR and all other options).


              The filenames that are read from the FILE are all relative to the source dir -- any leading slashes
              are removed and no ".." references are allowed to go higher than the source dir.  For example, take
              this command:

                 rsync -a --files-from=/tmp/foo /usr remote:/backup


              If /tmp/foo contains the string "bin" (or even "/bin"), the /usr/bin directory will be  created  as
              /backup/bin  on  the  remote  host.  If it contains "bin/" (note the trailing slash), the immediate
              contents of the directory would also be sent (without needing to be  explicitly  mentioned  in  the
              file  --  this  began  in  version 2.6.4).  In both cases, if the --rr option was enabled, that dir’s
              entire hierarchy would also be transferred (keep in mind that --rr needs to be  specified  explicitly
              with  ----ffiilleess--ffrroomm,  since  it is not implied by --aa).  Also note that the effect of the (enabled by
              default) ----rreellaattiivvee option is to duplicate only the path info that is read from the file -- it does
              not force the duplication of the source-spec path (/usr in this case).

              In  addition,  the  ----ffiilleess--ffrroomm file can be read from the remote host instead of the local host if
              you specify a "host:" in front of the file (the host must match one end of  the  transfer).   As  a
              short-cut,  you can specify just a prefix of ":" to mean "use the remote end of the transfer".  For
              example:

                 rsync -a --files-from=:/path/file-list src:/ /tmp/copy


              This would copy all the files specified in the /path/file-list file that was located on the  remote
              "src" host.

              If  the  ----iiccoonnvv  and ----pprrootteecctt--aarrggss options are specified and the ----ffiilleess--ffrroomm filenames are being
              sent from one host to another, the filenames will be translated from the sending host’s charset  to
              the receiving host’s charset.

              NOTE:  sorting  the list of files in the --files-from input helps rsync to be more efficient, as it
              will avoid re-visiting the path elements that are shared between adjacent entries.  If the input is
              not  sorted,  some path elements (implied directories) may end up being scanned multiple times, and
              rsync will eventually unduplicate them after they get turned into file-list elements.

       --00,, ----ffrroomm00
              This tells rsync that the rules/filenames it reads from a file are  terminated  by  a  null  (’\0’)
              character,  not a NL, CR, or CR+LF.  This affects ----eexxcclluuddee--ffrroomm, ----iinncclluuddee--ffrroomm, ----ffiilleess--ffrroomm, and
              any merged files specified in a ----ffiilltteerr rule.  It does not affect ----ccvvss--eexxcclluuddee (since  all  names
              read from a .cvsignore file are split on whitespace).

       --ss,, ----pprrootteecctt--aarrggss
              This  option  sends  all filenames and most options to the remote rsync without allowing the remote
              shell to interpret them.  This means that spaces are not split in names, and any non-wildcard  spe‐
              cial  characters  are  not  translated  (such  as ~, $, ;, &, etc.).  Wildcards are expanded on the
              remote host by rsync (instead of the shell doing it).

              If you use this option with ----iiccoonnvv, the args related to the remote side will  also  be  translated
              from  the  local  to  the  remote  character-set.   The  translation  happens before wild-cards are
              expanded.  See also the ----ffiilleess--ffrroomm option.

              You may also control this option via the RSYNC_PROTECT_ARGS environment variable.  If this variable
              has  a  non-zero  value,  this  option will be enabled by default, otherwise it will be disabled by
              default.  Either state is overridden by a manually specified positive or negative version  of  this
              option  (note  that ----nnoo--ss and ----nnoo--pprrootteecctt--aarrggss are the negative versions).  Since this option was
              first introduced in 3.0.0, you’ll need to make sure it’s disabled if you ever need to interact with
              a remote rsync that is older than that.

              Rsync  can also be configured (at build time) to have this option enabled by default (with is over‐
              ridden by both the environment and the command-line).  This option will  eventually  become  a  new
              default setting at some as-yet-undetermined point in the future.

       --TT,, ----tteemmpp--ddiirr==DDIIRR
              This option instructs rsync to use DIR as a scratch directory when creating temporary copies of the
              files transferred on the receiving side.  The default behavior is to create each temporary file  in
              the same directory as the associated destination file.

              This option is most often used when the receiving disk partition does not have enough free space to
              hold a copy of the largest file in the transfer.  In this case (i.e. when the scratch directory  is
              on  a different disk partition), rsync will not be able to rename each received temporary file over
              the top of the associated destination file, but instead must copy it into place.  Rsync  does  this
              by  copying  the  file  over the top of the destination file, which means that the destination file
              will contain truncated data during this copy.  If this were not done this way (even if the destina‐
              tion file were first removed, the data locally copied to a temporary file in the destination direc‐
              tory, and then renamed into place) it would be possible for the old file to continue taking up disk
              space  (if  someone had it open), and thus there might not be enough room to fit the new version on
              the disk at the same time.

              If you are using this option for reasons other than a shortage of disk space, you may wish to  com‐
              bine  it with the ----ddeellaayy--uuppddaatteess option, which will ensure that all copied files get put into sub‐
              directories in the destination hierarchy, awaiting the end of the  transfer.   If  you  don’t  have
              enough  room  to duplicate all the arriving files on the destination partition, another way to tell
              rsync that you aren’t overly concerned about disk space is to use the ----ppaarrttiiaall--ddiirr option  with  a
              relative  path;  because  this  tells rsync that it is OK to stash off a copy of a single file in a
              subdir in the destination hierarchy, rsync will use the partial-dir as a staging area to bring over
              the  copied  file,  and  then  rename it into place from there. (Specifying a ----ppaarrttiiaall--ddiirr with an
              absolute path does not have this side-effect.)

       --yy,, ----ffuuzzzzyy
              This option tells rsync that it should look for a basis file for any destination file that is miss‐
              ing.   The  current algorithm looks in the same directory as the destination file for either a file
              that has an identical size and modified-time, or a similarly-named file.  If found, rsync uses  the
              fuzzy basis file to try to speed up the transfer.

              If  the  option is repeated, the fuzzy scan will also be done in any matching alternate destination
              directories that are specified via ----ccoommppaarree--ddeesstt, ----ccooppyy--ddeesstt, or ----lliinnkk--ddeesstt.

              Note that the use of the ----ddeelleettee option might get rid  of  any  potential  fuzzy-match  files,  so
              either use ----ddeelleettee--aafftteerr or specify some filename exclusions if you need to prevent this.

       ----ccoommppaarree--ddeesstt==DDIIRR
              This  option  instructs  rsync  to use _D_I_R on the destination machine as an additional hierarchy to
              compare destination files against doing transfers (if the files  are  missing  in  the  destination
              directory).  If a file is found in _D_I_R that is identical to the sender’s file, the file will NOT be
              transferred to the destination directory.  This is useful for creating  a  sparse  backup  of  just
              files  that  have  changed  from  an earlier backup.  This option is typically used to copy into an
              empty (or newly created) directory.

              Beginning in version 2.6.4, multiple ----ccoommppaarree--ddeesstt directories may be provided, which  will  cause
              rsync  to search the list in the order specified for an exact match.  If a match is found that dif‐
              fers only in attributes, a local copy is made and the attributes updated.  If a match is not found,
              a basis file from one of the _D_I_Rs will be selected to try to speed up the transfer.

              If  _D_I_R  is a relative path, it is relative to the destination directory.  See also ----ccooppyy--ddeesstt and
              ----lliinnkk--ddeesstt.

              NOTE: beginning with version 3.1.0, rsync will remove a file from a non-empty destination hierarchy
              if  an  exact  match  is  found  in one of the compare-dest hierarchies (making the end result more
              closely match a fresh copy).

       ----ccooppyy--ddeesstt==DDIIRR
              This option behaves like ----ccoommppaarree--ddeesstt, but rsync will also copy unchanged files found in  _D_I_R  to
              the destination directory using a local copy.  This is useful for doing transfers to a new destina‐
              tion while leaving existing files intact, and then doing a flash-cutover when all files  have  been
              successfully transferred.

              Multiple  ----ccooppyy--ddeesstt directories may be provided, which will cause rsync to search the list in the
              order specified for an unchanged file.  If a match is not found, a basis file from one of the  _D_I_Rs
              will be selected to try to speed up the transfer.

              If  _D_I_R  is  a relative path, it is relative to the destination directory.  See also ----ccoommppaarree--ddeesstt
              and ----lliinnkk--ddeesstt.

       ----lliinnkk--ddeesstt==DDIIRR
              This option behaves like ----ccooppyy--ddeesstt, but unchanged files are hard linked from _D_I_R to the  destina‐
              tion  directory.  The files must be identical in all preserved attributes (e.g. permissions, possi‐
              bly ownership) in order for the files to be linked together.  An example:

                rsync -av --link-dest=$PWD/prior_dir host:src_dir/ new_dir/


              If file’s aren’t linking, double-check their attributes.  Also check if some attributes are getting
              forced  outside  of  rsync’s  control,  such a mount option that squishes root to a single user, or
              mounts a removable drive with generic ownership (such as OS X’s "Ignore ownership on  this  volume"
              option).

              Beginning  in  version  2.6.4,  multiple  ----lliinnkk--ddeesstt directories may be provided, which will cause
              rsync to search the list in the order specified for an exact match.  If a match is found that  dif‐
              fers only in attributes, a local copy is made and the attributes updated.  If a match is not found,
              a basis file from one of the _D_I_Rs will be selected to try to speed up the transfer.

              This option works best when copying into an empty destination hierarchy, as existing files may  get
              their  attributes  tweaked,  and that can affect alternate destination files via hard-links.  Also,
              itemizing of changes can get a bit muddled.  Note that prior to version 3.1.0, an  alternate-direc‐
              tory  exact  match  would  never be found (nor linked into the destination) when a destination file
              already exists.

              Note that if you combine this option with ----iiggnnoorree--ttiimmeess, rsync will not link  any  files  together
              because  it only links identical files together as a substitute for transferring the file, never as
              an additional check after the file is updated.

              If _D_I_R is a relative path, it is relative to the destination directory.   See  also  ----ccoommppaarree--ddeesstt
              and ----ccooppyy--ddeesstt.

              Note that rsync versions prior to 2.6.1 had a bug that could prevent ----lliinnkk--ddeesstt from working prop‐
              erly for a non-super-user when --oo was specified (or implied by --aa).  You can work-around  this  bug
              by avoiding the --oo option when sending to an old rsync.

       --zz,, ----ccoommpprreessss
              With  this  option,  rsync compresses the file data as it is sent to the destination machine, which
              reduces the amount of data being transmitted -- something that is useful over a slow connection.

              Note that this option typically achieves better compression ratios than can be achieved by using  a
              compressing  remote  shell  or  a  compressing transport because it takes advantage of the implicit
              information in the matching data blocks that are not explicitly sent over the connection.

              See the ----sskkiipp--ccoommpprreessss option for the default list of file suffixes that will not be compressed.

       ----ccoommpprreessss--lleevveell==NNUUMM
              Explicitly set the compression level to use (see ----ccoommpprreessss) instead of letting it default.  If NUM
              is non-zero, the ----ccoommpprreessss option is implied.

       ----sskkiipp--ccoommpprreessss==LLIISSTT
              Override  the  list  of  file suffixes that will not be compressed.  The LLIISSTT should be one or more
              file suffixes (without the dot) separated by slashes (/).

              You may specify an empty string to indicate that no file should be skipped.

              Simple character-class matching is supported: each must consist of a list  of  letters  inside  the
              square  brackets  (e.g. no special classes, such as "[:alpha:]", are supported, and ’-’ has no spe‐
              cial meaning).

              The characters asterisk (*) and question-mark (?) have no special meaning.

              Here’s an example that specifies 6 suffixes to skip (since 1 of the 5 rules matches 2 suffixes):

                  --skip-compress=gz/jpg/mp[34]/7z/bz2


              The default list of suffixes that will not be compressed is this (in this version of rsync):

              77zz aaccee aavvii bbzz22 ddeebb ggppgg ggzz iissoo jjppeegg jjppgg llzz llzzmmaa llzzoo mmoovv mmpp33 mmpp44 oogggg ppnngg rraarr rrppmm rrzziipp ttbbzz ttggzz ttllzz ttxxzz
              xxzz zz zziipp

              This  list  will  be  replaced by your ----sskkiipp--ccoommpprreessss list in all but one situation: a copy from a
              daemon rsync will add your skipped suffixes to its list of non-compressing files (and its list  may
              be configured to a different default).

       ----nnuummeerriicc--iiddss
              With  this  option  rsync will transfer numeric group and user IDs rather than using user and group
              names and mapping them at both ends.

              By default rsync will use the username and groupname to determine what ownership to give files. The
              special  uid  0  and  the  special  group  0  are  never  mapped  via  user/group names even if the
              ----nnuummeerriicc--iiddss option is not specified.

              If a user or group has no name on the source system or it has no match on the  destination  system,
              then  the  numeric  ID  from  the source system is used instead.  See also the comments on the "use
              chroot" setting in the rsyncd.conf manpage for  information  on  how  the  chroot  setting  affects
              rsync’s ability to look up the names of the users and groups and what you can do about it.

       ----uusseerrmmaapp==SSTTRRIINNGG,, ----ggrroouuppmmaapp==SSTTRRIINNGG
              These  options  allow  you to specify users and groups that should be mapped to other values by the
              receiving side.  The SSTTRRIINNGG is one or more FFRROOMM:TTOO pairs of values separated by commas.  Any match‐
              ing  FFRROOMM  value  from  the  sender is replaced with a TTOO value from the receiver.  You may specify
              usernames or user IDs for the FFRROOMM and TTOO values, and the  FFRROOMM  value  may  also  be  a  wild-card
              string,  which  will be matched against the sender’s names (wild-cards do NOT match against ID num‐
              bers, though see below for why a ’*’ matches everything).  You may instead specify a  range  of  ID
              numbers via an inclusive range: LOW-HIGH.  For example:

                --usermap=0-99:nobody,wayne:admin,*:normal --groupmap=usr:1,1:usr


              The  first  match  in  the list is the one that is used.  You should specify all your user mappings
              using a single ----uusseerrmmaapp option, and/or all your group mappings using a single ----ggrroouuppmmaapp option.

              Note that the sender’s name for the 0 user and group are not transmitted to the  receiver,  so  you
              should either match these values using a 0, or use the names in effect on the receiving side (typi‐
              cally "root").  All other FFRROOMM names match those in use on the sending side.  All  TTOO  names  match
              those in use on the receiving side.

              Any  IDs  that  do  not have a name on the sending side are treated as having an empty name for the
              purpose of matching.  This allows them to be matched via  a  "*"  or  using  an  empty  name.   For
              instance:

                --usermap=:nobody --groupmap=*:nobody


              When  the  ----nnuummeerriicc--iiddss  option  is  used,  the sender does not send any names, so all the IDs are
              treated as having an empty name.  This means that you will need to specify numeric FFRROOMM  values  if
              you want to map these nameless IDs to different values.

              For the ----uusseerrmmaapp option to have any effect, the --oo (----oowwnneerr) option must be used (or implied), and
              the receiver will need to be running as a super-user (see also the ----ffaakkee--ssuuppeerr option).   For  the
              ----ggrroouuppmmaapp  option  to have any effect, the --gg (----ggrroouuppss) option must be used (or implied), and the
              receiver will need to have permissions to set that group.

       ----cchhoowwnn==UUSSEERR::GGRROOUUPP
              This option forces all files to be owned by USER with group GROUP.  This  is  a  simpler  interface
              than using ----uusseerrmmaapp and ----ggrroouuppmmaapp directly, but it is implemented using those options internally,
              so you cannot mix them.  If either the  USER  or  GROUP  is  empty,  no  mapping  for  the  omitted
              user/group will occur.  If GROUP is empty, the trailing colon may be omitted, but if USER is empty,
              a leading colon must be supplied.

              If  you  specify  "--chown=foo:bar,  this  is  exactly  the  same  as  specifying  "--usermap=*:foo
              --groupmap=*:bar", only easier.

       ----ttiimmeeoouutt==TTIIMMEEOOUUTT
              This  option  allows you to set a maximum I/O timeout in seconds. If no data is transferred for the
              specified time then rsync will exit. The default is 0, which means no timeout.

       ----ccoonnttiimmeeoouutt
              This option allows you to set the amount of time that rsync will wait  for  its  connection  to  an
              rsync daemon to succeed.  If the timeout is reached, rsync exits with an error.

       ----aaddddrreessss
              By  default  rsync  will  bind  to  the  wildcard  address when connecting to an rsync daemon.  The
              ----aaddddrreessss option allows you to specify a specific IP address (or hostname) to bind  to.   See  also
              this option in the ----ddaaeemmoonn mode section.

       ----ppoorrtt==PPOORRTT
              This  specifies  an  alternate TCP port number to use rather than the default of 873.  This is only
              needed if you are using the double-colon (::) syntax to connect with an rsync daemon (since the URL
              syntax  has  a way to specify the port as a part of the URL).  See also this option in the ----ddaaeemmoonn
              mode section.

       ----ssoocckkooppttss
              This option can provide endless fun for people who like to tune their systems to the utmost degree.
              You  can set all sorts of socket options which may make transfers faster (or slower!). Read the man
              page for the setsockopt() system call for details on some of the options you may be able to set. By
              default  no special socket options are set. This only affects direct socket connections to a remote
              rsync daemon.  This option also exists in the ----ddaaeemmoonn mode section.

       ----bblloocckkiinngg--iioo
              This tells rsync to use blocking I/O when launching a remote shell transport.  If the remote  shell
              is  either  rsh  or  remsh,  rsync  defaults  to using blocking I/O, otherwise it defaults to using
              non-blocking I/O.  (Note that ssh prefers non-blocking I/O.)

       ----oouuttbbuuff==MMOODDEE
              This sets the output buffering mode.  The mode can be None (aka Unbuffered), Line,  or  Block  (aka
              Full).  You may specify as little as a single letter for the mode, and use upper or lower case.

              The  main  use  of this option is to change Full buffering to Line buffering when rsync’s output is
              going to a file or pipe.

       --ii,, ----iitteemmiizzee--cchhaannggeess
              Requests a simple itemized list of the  changes  that  are  being  made  to  each  file,  including
              attribute  changes.   This is exactly the same as specifying ----oouutt--ffoorrmmaatt==''%%ii %%nn%%LL''.  If you repeat
              the option, unchanged files will also be output, but only if the receiving rsync is at  least  ver‐
              sion  2.6.7  (you  can  use  --vvvv with older versions of rsync, but that also turns on the output of
              other verbose messages).

              The "%i" escape has a cryptic output that is 11 letters long.   The  general  format  is  like  the
              string  YYXXccssttppoogguuaaxx,  where  YY  is  replaced by the type of update being done, XX is replaced by the
              file-type, and the other letters represent attributes that may be output if they  are  being  modi‐
              fied.

              The update types that replace the YY are as follows:

              o      A << means that a file is being transferred to the remote host (sent).

              o      A >> means that a file is being transferred to the local host (received).

              o      A  cc means that a local change/creation is occurring for the item (such as the creation of a
                     directory or the changing of a symlink, etc.).

              o      A hh means that the item is a hard link to another item (requires ----hhaarrdd--lliinnkkss).

              o      A .. means that the item is not being updated (though it might have attributes that are being
                     modified).

              o      A ** means that the rest of the itemized-output area contains a message (e.g. "deleting").


              The  file-types  that replace the XX are: ff for a file, a dd for a directory, an LL for a symlink, a DD
              for a device, and a SS for a special file (e.g. named sockets and fifos).

              The other letters in the string above are the actual letters that will be output if the  associated
              attribute  for the item is being updated or a "." for no change.  Three exceptions to this are: (1)
              a newly created item replaces each letter with a "+", (2) an identical item replaces the dots  with
              spaces,  and (3) an unknown attribute replaces each letter with a "?" (this can happen when talking
              to an older rsync).

              The attribute that is associated with each letter is as follows:

              o      A cc means either that a regular file has a different checksum (requires ----cchheecckkssuumm) or  that
                     a  symlink, device, or special file has a changed value.  Note that if you are sending files
                     to an rsync prior to 3.0.1, this change flag will be  present  only  for  checksum-differing
                     regular files.

              o      A ss means the size of a regular file is different and will be updated by the file transfer.

              o      A  tt  means  the  modification  time is different and is being updated to the sender’s value
                     (requires ----ttiimmeess).  An alternate value of TT means that the modification time will be set to
                     the  transfer  time, which happens when a file/symlink/device is updated without ----ttiimmeess and
                     when a symlink is changed and the receiver can’t set its time.  (Note: when using  an  rsync
                     3.0.0 client, you might see the ss flag combined with tt instead of the proper TT flag for this
                     time-setting failure.)

              o      A pp means the permissions are  different  and  are  being  updated  to  the  sender’s  value
                     (requires ----ppeerrmmss).

              o      An  oo  means  the  owner  is  different and is being updated to the sender’s value (requires
                     ----oowwnneerr and super-user privileges).

              o      A gg means the group is different and is  being  updated  to  the  sender’s  value  (requires
                     ----ggrroouupp and the authority to set the group).

              o      The uu slot is reserved for future use.

              o      The aa means that the ACL information changed.

              o      The xx means that the extended attribute information changed.


              One other output is possible:  when deleting files, the "%i" will output the string "*deleting" for
              each item that is being removed (assuming that you are talking to a recent  enough  rsync  that  it
              logs deletions instead of outputting them as a verbose message).

       ----oouutt--ffoorrmmaatt==FFOORRMMAATT
              This allows you to specify exactly what the rsync client outputs to the user on a per-update basis.
              The format is a text string containing embedded single-character escape sequences prefixed  with  a
              percent (%) character.   A default format of "%n%L" is assumed if either ----iinnffoo==nnaammee or --vv is spec‐
              ified (this tells you just the name of the file and, if the item is a link, where it points).   For
              a full list of the possible escape characters, see the "log format" setting in the rsyncd.conf man‐
              page.

              Specifying the ----oouutt--ffoorrmmaatt option implies the ----iinnffoo==nnaammee option, which will  mention  each  file,
              dir,  etc.  that gets updated in a significant way (a transferred file, a recreated symlink/device,
              or a touched directory).  In addition, if the itemize-changes escape (%i) is included in the string
              (e.g. if the ----iitteemmiizzee--cchhaannggeess option was used), the logging of names increases to mention any item
              that is changed in any way (as long as the receiving side is at  least  2.6.4).   See  the  ----iitteemm‐‐
              iizzee--cchhaannggeess option for a description of the output of "%i".

              Rsync  will  output  the  out-format  string  prior  to  a file’s transfer unless one of the trans‐
              fer-statistic escapes is requested, in which case the logging is done at  the  end  of  the  file’s
              transfer.   When  this  late logging is in effect and ----pprrooggrreessss is also specified, rsync will also
              output the name of the file being transferred prior  to  its  progress  information  (followed,  of
              course, by the out-format output).

       ----lloogg--ffiillee==FFIILLEE
              This  option causes rsync to log what it is doing to a file.  This is similar to the logging that a
              daemon does, but can be requested for the client side and/or the server side of a non-daemon trans‐
              fer.   If  specified  as a client option, transfer logging will be enabled with a default format of
              "%i %n%L".  See the ----lloogg--ffiillee--ffoorrmmaatt option if you wish to override this.

              Here’s a example command that requests the remote side to log what is happening:

                rsync -av --remote-option=--log-file=/tmp/rlog src/ dest/


              This is very useful if you need to debug why a connection is closing unexpectedly.

       ----lloogg--ffiillee--ffoorrmmaatt==FFOORRMMAATT
              This allows you to specify exactly what per-update logging is put into the file  specified  by  the
              ----lloogg--ffiillee  option (which must also be specified for this option to have any effect).  If you spec‐
              ify an empty string, updated files will not be mentioned in the log file.  For a list of the possi‐
              ble escape characters, see the "log format" setting in the rsyncd.conf manpage.

              The default FORMAT used if ----lloogg--ffiillee is specified and this option is not is ’%i %n%L’.

       ----ssttaattss
              This  tells  rsync  to print a verbose set of statistics on the file transfer, allowing you to tell
              how effective rsync’s delta-transfer algorithm is for your data.   This  option  is  equivalent  to
              ----iinnffoo==ssttaattss22  if  combined  with 0 or 1 --vv options, or ----iinnffoo==ssttaattss33 if combined with 2 or more --vv
              options.

              The current statistics are as follows:

              o      NNuummbbeerr ooff ffiilleess is the count of all "files" (in the generic sense), which includes  directo‐
                     ries,  symlinks,  etc.  The total count will be followed by a list of counts by filetype (if
                     the total is non-zero).  For example: "(reg: 5, dir: 3, link: 2, dev: 1, special: 1)"  lists
                     the  totals for regular files, directories, symlinks, devices, and special files.  If any of
                     value is 0, it is completely omitted from the list.

              o      NNuummbbeerr ooff ccrreeaatteedd ffiilleess is the count of how many "files" (generic sense)  were  created  (as
                     opposed  to  updated).  The total count will be followed by a list of counts by filetype (if
                     the total is non-zero).

              o      NNuummbbeerr ooff ddeelleetteedd ffiilleess is the count of how many "files" (generic sense)  were  created  (as
                     opposed  to  updated).  The total count will be followed by a list of counts by filetype (if
                     the total is non-zero).  Note that this line is only output if deletions are in effect,  and
                     only if protocol 31 is being used (the default for rsync 3.1.x).

              o      NNuummbbeerr  ooff  rreegguullaarr  ffiilleess  ttrraannssffeerrrreedd  is  the count of normal files that were updated via
                     rsync’s delta-transfer algorithm, which does not include dirs,  symlinks,  etc.   Note  that
                     rsync 3.1.0 added the word "regular" into this heading.

              o      TToottaall ffiillee ssiizzee is the total sum of all file sizes in the transfer.  This does not count any
                     size for directories or special files, but does include the size of symlinks.

              o      TToottaall ttrraannssffeerrrreedd ffiillee ssiizzee is the total sum of all files sizes  for  just  the  transferred
                     files.

              o      LLiitteerraall ddaattaa is how much unmatched file-update data we had to send to the receiver for it to
                     recreate the updated files.

              o      MMaattcchheedd ddaattaa is how much data the receiver got locally when recreating the updated files.

              o      FFiillee lliisstt ssiizzee is how big the file-list data was when the sender sent it  to  the  receiver.
                     This  is smaller than the in-memory size for the file list due to some compressing of dupli‐
                     cated data when rsync sends the list.

              o      FFiillee lliisstt ggeenneerraattiioonn ttiimmee is the number of seconds that the sender spent creating  the  file
                     list.  This requires a modern rsync on the sending side for this to be present.

              o      FFiillee lliisstt ttrraannssffeerr ttiimmee is the number of seconds that the sender spent sending the file list
                     to the receiver.

              o      TToottaall bbyytteess sseenntt is the count of all the bytes that rsync sent from the client side  to  the
                     server side.

              o      TToottaall bbyytteess rreecceeiivveedd is the count of all non-message bytes that rsync received by the client
                     side from the server side.  "Non-message" bytes means that we don’t count the  bytes  for  a
                     verbose message that the server sent to us, which makes the stats more consistent.


       --88,, ----88--bbiitt--oouuttppuutt
              This tells rsync to leave all high-bit characters unescaped in the output instead of trying to test
              them to see if they’re valid in the current locale and escaping  the  invalid  ones.   All  control
              characters (but never tabs) are always escaped, regardless of this option’s setting.

              The  escape  idiom  that started in 2.6.7 is to output a literal backslash (\) and a hash (#), fol‐
              lowed by exactly 3 octal digits.  For example, a newline would output as "\#012".  A literal  back‐
              slash that is in a filename is not escaped unless it is followed by a hash and 3 digits (0-9).

       --hh,, ----hhuummaann--rreeaaddaabbllee
              Output  numbers  in a more human-readable format.  There are 3 possible levels:  (1) output numbers
              with a separator between each set of 3 digits (either a comma or a period, depending on if the dec‐
              imal  point  is  represented  by  a period or a comma); (2) output numbers in units of 1000 (with a
              character suffix for larger units -- see below); (3) output numbers in units of 1024.

              The default is human-readable level 1.  Each --hh option increases the level by one.   You  can  take
              the  level  down  to  0  (to  output  numbers  as pure digits) by specifing the ----nnoo--hhuummaann--rreeaaddaabbllee
              (----nnoo--hh) option.

              The unit letters that are appended in levels 2 and 3 are: K  (kilo),  M  (mega),  G  (giga),  or  T
              (tera).   For example, a 1234567-byte file would output as 1.23M in level-2 (assuming that a period
              is your local decimal point).

              Backward compatibility note:  versions of rsync prior to 3.1.0 do not support human-readable  level
              1, and they default to level 0.  Thus, specifying one or two --hh options will behave in a comparable
              manner in old and new versions as long as you didn’t specify a ----nnoo--hh option prior to one  or  more
              --hh options.  See the ----lliisstt--oonnllyy option for one difference.

       ----ppaarrttiiaall
              By  default,  rsync  will  delete any partially transferred file if the transfer is interrupted. In
              some circumstances it is more desirable to keep partially transferred files.  Using  the  ----ppaarrttiiaall
              option  tells rsync to keep the partial file which should make a subsequent transfer of the rest of
              the file much faster.

       ----ppaarrttiiaall--ddiirr==DDIIRR
              A better way to keep partial files than the ----ppaarrttiiaall option is to specify a _D_I_R that will be  used
              to  hold  the partial data (instead of writing it out to the destination file).  On the next trans‐
              fer, rsync will use a file found in this dir as data to speed up the resumption of the transfer and
              then delete it after it has served its purpose.

              Note  that if ----wwhhoollee--ffiillee is specified (or implied), any partial-dir file that is found for a file
              that is being updated will simply be removed (since rsync is sending files  without  using  rsync’s
              delta-transfer algorithm).

              Rsync  will  create the _D_I_R if it is missing (just the last dir -- not the whole path).  This makes
              it easy to use a relative path (such as "----ppaarrttiiaall--ddiirr==..rrssyynncc--ppaarrttiiaall") to have  rsync  create  the
              partial-directory  in  the  destination file’s directory when needed, and then remove it again when
              the partial file is deleted.

              If the partial-dir value is not an absolute path, rsync will add an exclude rule at the end of  all
              your  existing  excludes.  This will prevent the sending of any partial-dir files that may exist on
              the sending side, and will also prevent the untimely deletion of partial-dir items on the receiving
              side.   An  example: the above ----ppaarrttiiaall--ddiirr option would add the equivalent of "--ff ''--pp ..rrssyynncc--ppaarr‐‐
              ttiiaall//''" at the end of any other filter rules.

              If you are supplying your own exclude rules, you may need to add your own exclude/hide/protect rule
              for  the  partial-dir  because  (1) the auto-added rule may be ineffective at the end of your other
              rules, or (2) you may wish to override rsync’s exclude choice.  For instance, if you want  to  make
              rsync   clean-up  any  left-over  partial-dirs  that  may  be  lying  around,  you  should  specify
              ----ddeelleettee--aafftteerr and  add  a  "risk"  filter  rule,  e.g.   --ff  ''RR  ..rrssyynncc--ppaarrttiiaall//''.   (Avoid  using
              ----ddeelleettee--bbeeffoorree  or  ----ddeelleettee--dduurriinngg  unless  you don’t need rsync to use any of the left-over par‐
              tial-dir data during the current run.)

              IMPORTANT: the ----ppaarrttiiaall--ddiirr should not be writable by other users or it is a security risk.   E.g.
              AVOID "/tmp".

              You can also set the partial-dir value the RSYNC_PARTIAL_DIR environment variable.  Setting this in
              the environment does not force ----ppaarrttiiaall to be enabled, but rather it affects where  partial  files
              go when ----ppaarrttiiaall is specified.  For instance, instead of using ----ppaarrttiiaall--ddiirr==..rrssyynncc--ttmmpp along with
              ----pprrooggrreessss, you could set RSYNC_PARTIAL_DIR=.rsync-tmp in your environment and then just use the --PP
              option  to  turn  on  the use of the .rsync-tmp dir for partial transfers.  The only times that the
              ----ppaarrttiiaall option does not look for this environment value are  (1)  when  ----iinnppllaaccee  was  specified
              (since  ----iinnppllaaccee  conflicts  with  ----ppaarrttiiaall--ddiirr), and (2) when ----ddeellaayy--uuppddaatteess was specified (see
              below).

              For the purposes of the daemon-config’s "refuse options"  setting,  ----ppaarrttiiaall--ddiirr  does  _n_o_t  imply
              ----ppaarrttiiaall.  This is so that a refusal of the ----ppaarrttiiaall option can be used to disallow the overwrit‐
              ing of destination files with a partial transfer, while still allowing the safer idiom provided  by
              ----ppaarrttiiaall--ddiirr.

       ----ddeellaayy--uuppddaatteess
              This  option  puts the temporary file from each updated file into a holding directory until the end
              of the transfer, at which time all the files are renamed into  place  in  rapid  succession.   This
              attempts  to  make the updating of the files a little more atomic.  By default the files are placed
              into a directory named ".~tmp~" in each file’s destination directory, but if you’ve  specified  the
              ----ppaarrttiiaall--ddiirr  option,  that directory will be used instead.  See the comments in the ----ppaarrttiiaall--ddiirr
              section for a discussion of how this ".~tmp~" dir will be excluded from the transfer, and what  you
              can  do  if you want rsync to cleanup old ".~tmp~" dirs that might be lying around.  Conflicts with
              ----iinnppllaaccee and ----aappppeenndd.

              This option uses more memory on the receiving side (one bit per file transferred) and also requires
              enough  free  disk space on the receiving side to hold an additional copy of all the updated files.
              Note also that you should not use an absolute path to ----ppaarrttiiaall--ddiirr unless (1) there is  no  chance
              of  any  of the files in the transfer having the same name (since all the updated files will be put
              into a single directory if the path is absolute) and (2) there are no mount points in the hierarchy
              (since the delayed updates will fail if they can’t be renamed into place).

              See  also  the  "atomic-rsync"  perl script in the "support" subdir for an update algorithm that is
              even more atomic (it uses ----lliinnkk--ddeesstt and a parallel hierarchy of files).

       --mm,, ----pprruunnee--eemmppttyy--ddiirrss
              This option tells the receiving rsync to get rid of empty directories from the file-list, including
              nested  directories  that have no non-directory children.  This is useful for avoiding the creation
              of a bunch of useless directories when the sending rsync is recursively  scanning  a  hierarchy  of
              files using include/exclude/filter rules.

              Note  that the use of transfer rules, such as the ----mmiinn--ssiizzee option, does not affect what goes into
              the file list, and thus does not leave directories empty, even if none of the files in a  directory
              match the transfer rule.

              Because  the  file-list  is  actually  being  pruned, this option also affects what directories get
              deleted when a delete is active.  However, keep in mind that excluded  files  and  directories  can
              prevent existing items from being deleted due to an exclude both hiding source files and protecting
              destination files.  See the perishable filter-rule option for how to avoid this.

              You can prevent the pruning of certain empty directories from the file-list by using a global "pro‐
              tect" filter.  For instance, this option would ensure that the directory "emptydir" was kept in the
              file-list:

              --filter ’protect emptydir/’


              Here’s an example that copies all .pdf files in a hierarchy, only creating the  necessary  destina‐
              tion  directories to hold the .pdf files, and ensures that any superfluous files and directories in
              the destination are removed (note the hide filter of  non-directories  being  used  instead  of  an
              exclude):

              rsync -avm --del --include=’*.pdf’ -f ’hide,! */’ src/ dest


              If  you  didn’t  want  to  remove  superfluous  destination files, the more time-honored options of
              "----iinncclluuddee==''**//'' ----eexxcclluuddee==''**''" would work fine in place of the hide-filter (if that is more natural
              to you).

       ----pprrooggrreessss
              This  option  tells  rsync  to print information showing the progress of the transfer. This gives a
              bored  user  something  to  watch.   With  a  modern  rsync  this  is  the   same   as   specifying
              ----iinnffoo==fflliisstt22,,nnaammee,,pprrooggrreessss,  but  any user-supplied settings for those info flags takes precedence
              (e.g. "--info=flist0 --progress").

              While rsync is transferring a regular file, it updates a progress line that looks like this:

                    782448  63%  110.64kB/s    0:00:04


              In this example, the receiver has reconstructed 782448 bytes or 63% of the sender’s file, which  is
              being  reconstructed  at  a  rate of 110.64 kilobytes per second, and the transfer will finish in 4
              seconds if the current rate is maintained until the end.

              These statistics can be misleading if rsync’s delta-transfer algorithm is in use.  For example,  if
              the  sender’s  file  consists of the basis file followed by additional data, the reported rate will
              probably drop dramatically when the receiver gets to the literal data, and the transfer will proba‐
              bly  take much longer to finish than the receiver estimated as it was finishing the matched part of
              the file.

              When the file transfer finishes, rsync replaces the progress line with a summary  line  that  looks
              like this:

                    1,238,099 100%  146.38kB/s    0:00:08  (xfr#5, to-chk=169/396)


              In  this  example, the file was 1,238,099 bytes long in total, the average rate of transfer for the
              whole file was 146.38 kilobytes per second over the 8 seconds that it took to complete, it was  the
              5th  transfer  of a regular file during the current rsync session, and there are 169 more files for
              the receiver to check (to see if they are up-to-date or not) remaining out of the 396  total  files
              in the file-list.

              In an incremental recursion scan, rsync won’t know the total number of files in the file-list until
              it reaches the ends of the scan, but since it starts to transfer files during  the  scan,  it  will
              display  a  line with the text "ir-chk" (for incremental recursion check) instead of "to-chk" until
              the point that it knows the full size of the list, at which point it will switch to using "to-chk".
              Thus,  seeing  "ir-chk" lets you know that the total count of files in the file list is still going
              to increase (and each time it does, the count of files left to check  will increase by  the  number
              of the files added to the list).

       --PP     The  --PP  option  is  equivalent  to ----ppaarrttiiaall ----pprrooggrreessss.  Its purpose is to make it much easier to
              specify these two options for a long transfer that may be interrupted.

              There is also a ----iinnffoo==pprrooggrreessss22 option that outputs statistics based on the whole transfer, rather
              than  individual  files.   Use  this  flag  without outputting a filename (e.g. avoid --vv or specify
              ----iinnffoo==nnaammee00 if you want to see how the transfer is doing without scrolling the screen with  a  lot
              of names.  (You don’t need to specify the ----pprrooggrreessss option in order to use ----iinnffoo==pprrooggrreessss22.)

       ----ppaasssswwoorrdd--ffiillee==FFIILLEE
              This  option allows you to provide a password for accessing an rsync daemon via a file or via stan‐
              dard input if FFIILLEE is --.  The file should contain just the password on the first  line  (all  other
              lines are ignored).  Rsync will exit with an error if FFIILLEE is world readable or if a root-run rsync
              command finds a non-root-owned file.

              This option does not supply a password to a remote shell transport such as ssh; to learn how to  do
              that,  consult  the  remote  shell’s  documentation.  When accessing an rsync daemon using a remote
              shell as the transport, this option only comes into effect after  the  remote  shell  finishes  its
              authentication (i.e. if you have also specified a password in the daemon’s config file).

       ----lliisstt--oonnllyy
              This  option  will  cause  the  source  files  to be listed instead of transferred.  This option is
              inferred if there is a single source arg and no destination specified, so its main uses are: (1) to
              turn  a copy command that includes a destination arg into a file-listing command, or (2) to be able
              to specify more than one source arg (note: be sure to include the destination).  Caution:  keep  in
              mind that a source arg with a wild-card is expanded by the shell into multiple args, so it is never
              safe to try to list such an arg without using this option.  For example:

                  rsync -av --list-only foo* dest/


              Starting with rsync 3.1.0, the sizes output by ----lliisstt--oonnllyy are  affected  by  the  ----hhuummaann--rreeaaddaabbllee
              option.   By default they will contain digit separators, but higher levels of readability will out‐
              put the sizes with unit suffixes.  Note also  that  the  column  width  for  the  size  output  has
              increased from 11 to 14 characters for all human-readable levels.  Use ----nnoo--hh if you want just dig‐
              its in the sizes, and the old column width of 11 characters.

              Compatibility note:  when requesting a remote listing of files from an rsync that is version  2.6.3
              or  older,  you  may  encounter an error if you ask for a non-recursive listing.  This is because a
              file listing implies the ----ddiirrss option w/o ----rreeccuurrssiivvee, and older rsyncs don’t  have  that  option.
              To  avoid  this  problem, either specify the ----nnoo--ddiirrss option (if you don’t need to expand a direc‐
              tory’s  content),  or  turn  on  recursion  and  exclude  the   content   of   subdirectories:   --rr
              ----eexxcclluuddee==''//**//**''.

       ----bbwwlliimmiitt==RRAATTEE
              This  option  allows  you  to  specify the maximum transfer rate for the data sent over the socket,
              specified in units per second.  The RATE value can be suffixed with a string  to  indicate  a  size
              multiplier, and may be a fractional value (e.g.  "----bbwwlliimmiitt==11..55mm").  If no suffix is specified, the
              value will be assumed to be in units of 1024 bytes (as if "K" or "KiB" had been appended).  See the
              ----mmaaxx--ssiizzee  option  for  a  description of all the available suffixes. A value of zero specifies no
              limit.

              For backward-compatibility reasons, the rate limit will be rounded to the nearest KiB unit,  so  no
              rate smaller than 1024 bytes per second is possible.

              Rsync  writes  data  over  the socket in blocks, and this option both limits the size of the blocks
              that rsync writes, and tries to keep the average  transfer  rate  at  the  requested  limit.   Some
              "burstiness"  may be seen where rsync writes out a block of data and then sleeps to bring the aver‐
              age rate into compliance.

              Due to the internal buffering of data, the ----pprrooggrreessss option may not be an accurate  reflection  on
              how fast the data is being sent.  This is because some files can show up as being rapidly sent when
              the data is quickly buffered, while other can show up as very slow when the flushing of the  output
              buffer occurs.  This may be fixed in a future version.

       ----wwrriittee--bbaattcchh==FFIILLEE
              Record a file that can later be applied to another identical destination with ----rreeaadd--bbaattcchh. See the
              "BATCH MODE" section for details, and also the ----oonnllyy--wwrriittee--bbaattcchh option.

       ----oonnllyy--wwrriittee--bbaattcchh==FFIILLEE
              Works like ----wwrriittee--bbaattcchh, except that no updates are made on the destination system  when  creating
              the  batch.  This lets you transport the changes to the destination system via some other means and
              then apply the changes via ----rreeaadd--bbaattcchh.

              Note that you can feel free to write the batch directly to some portable media: if this media fills
              to  capacity before the end of the transfer, you can just apply that partial transfer to the desti‐
              nation and repeat the whole process to get the rest of the changes (as long as  you  don’t  mind  a
              partially updated destination system while the multi-update cycle is happening).

              Also  note that you only save bandwidth when pushing changes to a remote system because this allows
              the batched data to be diverted from the sender into the batch file without having to flow over the
              wire to the receiver (when pulling, the sender is remote, and thus can’t write the batch).

       ----rreeaadd--bbaattcchh==FFIILLEE
              Apply  all of the changes stored in FILE, a file previously generated by ----wwrriittee--bbaattcchh.  If _F_I_L_E is
              --, the batch data will be read from standard input.  See the "BATCH MODE" section for details.

       ----pprroottooccooll==NNUUMM
              Force an older protocol version to be used.  This is useful for creating a batch file that is  com‐
              patible  with  an  older  version  of  rsync.   For instance, if rsync 2.6.4 is being used with the
              ----wwrriittee--bbaattcchh option, but rsync 2.6.3 is what will be used to  run  the  ----rreeaadd--bbaattcchh  option,  you
              should  use  "--protocol=28" when creating the batch file to force the older protocol version to be
              used in the batch file (assuming you can’t upgrade the rsync on the reading system).

       ----iiccoonnvv==CCOONNVVEERRTT__SSPPEECC
              Rsync can convert filenames between character sets using this option.  Using a CONVERT_SPEC of  "."
              tells  rsync  to  look  up  the default character-set via the locale setting.  Alternately, you can
              fully specify what conversion to do by giving a local and a remote charset separated by a comma  in
              the  order  ----iiccoonnvv==LLOOCCAALL,,RREEMMOOTTEE,  e.g.  ----iiccoonnvv==uuttff88,,iissoo8888559911.  This order ensures that the option
              will stay the same whether you’re pushing or  pulling  files.   Finally,  you  can  specify  either
              ----nnoo--iiccoonnvv or a CONVERT_SPEC of "-" to turn off any conversion.  The default setting of this option
              is site-specific, and can also be affected via the RSYNC_ICONV environment variable.

              For a list of what charset names your local iconv library supports, you can run "iconv --list".

              If you specify the ----pprrootteecctt--aarrggss option (--ss), rsync will translate the filenames  you  specify  on
              the command-line that are being sent to the remote host.  See also the ----ffiilleess--ffrroomm option.

              Note  that  rsync  does  not  do any conversion of names in filter files (including include/exclude
              files).  It is up to you to ensure that you’re specifying matching rules that  can  match  on  both
              sides  of  the  transfer.   For  instance, you can specify extra include/exclude rules if there are
              filename differences on the two sides that need to be accounted for.

              When you pass an ----iiccoonnvv option to an rsync daemon that allows it,  the  daemon  uses  the  charset
              specified  in  its  "charset" configuration parameter regardless of the remote charset you actually
              pass.  Thus, you may feel free to specify just the  local  charset  for  a  daemon  transfer  (e.g.
              ----iiccoonnvv==uuttff88).

       --44,, ----iippvv44 or --66,, ----iippvv66
              Tells  rsync  to  prefer IPv4/IPv6 when creating sockets.  This only affects sockets that rsync has
              direct control over, such as the outgoing socket when directly contacting  an  rsync  daemon.   See
              also these options in the ----ddaaeemmoonn mode section.

              If  rsync was complied without support for IPv6, the ----iippvv66 option will have no effect.  The ----vveerr‐‐
              ssiioonn output will tell you if this is the case.

       ----cchheecckkssuumm--sseeeedd==NNUUMM
              Set the checksum seed to the integer NUM.  This 4 byte checksum seed is included in each block  and
              MD4  file  checksum  calculation (the more modern MD5 file checksums don’t use a seed).  By default
              the checksum seed is generated by the server and defaults to the current time() .  This  option  is
              used  to  set a specific checksum seed, which is useful for applications that want repeatable block
              checksums, or in the case where the user wants a more random  checksum  seed.   Setting  NUM  to  0
              causes rsync to use the default of time() for checksum seed.

DDAAEEMMOONN OOPPTTIIOONNSS
       The options allowed when starting an rsync daemon are as follows:

       ----ddaaeemmoonn
              This tells rsync that it is to run as a daemon.  The daemon you start running may be accessed using
              an rsync client using the hhoosstt::::mmoodduullee or rrssyynncc::////hhoosstt//mmoodduullee// syntax.

              If standard input is a socket then rsync will assume that it is being run via inetd,  otherwise  it
              will  detach  from  the  current terminal and become a background daemon.  The daemon will read the
              config file (rsyncd.conf) on each connect made by a client and  respond  to  requests  accordingly.
              See the rrssyynnccdd..ccoonnff(5) man page for more details.

       ----aaddddrreessss
              By  default  rsync will bind to the wildcard address when run as a daemon with the ----ddaaeemmoonn option.
              The ----aaddddrreessss option allows you to specify a specific IP address (or hostname) to  bind  to.   This
              makes  virtual  hosting  possible  in conjunction with the ----ccoonnffiigg option.  See also the "address"
              global option in the rsyncd.conf manpage.

       ----bbwwlliimmiitt==RRAATTEE
              This option allows you to specify the maximum transfer rate for the data the daemon sends over  the
              socket.   The  client  can  still  specify  a  smaller ----bbwwlliimmiitt value, but no larger value will be
              allowed.  See the client version of this option (above) for some extra details.

       ----ccoonnffiigg==FFIILLEE
              This specifies an alternate config file than the default.  This is only relevant when  ----ddaaeemmoonn  is
              specified.   The  default is /etc/rsyncd.conf unless the daemon is running over a remote shell pro‐
              gram and the remote user is not the super-user; in that case the default is rsyncd.conf in the cur‐
              rent directory (typically $HOME).

       --MM,, ----ddppaarraamm==OOVVEERRRRIIDDEE
              This option can be used to set a daemon-config parameter when starting up rsync in daemon mode.  It
              is equivalent to adding the parameter at the end of the global settings prior to the first module’s
              definition.  The parameter names can be specified without spaces, if you so desire.  For instance:

                  rsync --daemon -M pidfile=/path/rsync.pid


       ----nnoo--ddeettaacchh
              When  running as a daemon, this option instructs rsync to not detach itself and become a background
              process.  This option is required when running as a service on Cygwin, and may also be useful  when
              rsync  is  supervised  by  a  program  such  as  ddaaeemmoonnttoooollss  or  AIX’s SSyysstteemm RReessoouurrccee CCoonnttrroolllleerr.
              ----nnoo--ddeettaacchh is also recommended when rsync is run under a debugger.  This option has no  effect  if
              rsync is run from inetd or sshd.

       ----ppoorrtt==PPOORRTT
              This  specifies an alternate TCP port number for the daemon to listen on rather than the default of
              873.  See also the "port" global option in the rsyncd.conf manpage.

       ----lloogg--ffiillee==FFIILLEE
              This option tells the rsync daemon to use the given log-file name instead of using the  "log  file"
              setting in the config file.

       ----lloogg--ffiillee--ffoorrmmaatt==FFOORRMMAATT
              This option tells the rsync daemon to use the given FORMAT string instead of using the "log format"
              setting in the config file.  It also enables "transfer logging" unless  the  string  is  empty,  in
              which case transfer logging is turned off.

       ----ssoocckkooppttss
              This overrides the ssoocckkeett ooppttiioonnss setting in the rsyncd.conf file and has the same syntax.

       --vv,, ----vveerrbboossee
              This  option  increases  the amount of information the daemon logs during its startup phase.  After
              the client connects, the daemon’s verbosity level will be controlled by the options that the client
              used and the "max verbosity" setting in the module’s config section.

       --44,, ----iippvv44 or --66,, ----iippvv66
              Tells  rsync  to prefer IPv4/IPv6 when creating the incoming sockets that the rsync daemon will use
              to listen for connections.  One of these options may be required in older versions of Linux to work
              around an IPv6 bug in the kernel (if you see an "address already in use" error when nothing else is
              using the port, try specifying ----iippvv66 or ----iippvv44 when starting the daemon).

              If rsync was complied without support for IPv6, the ----iippvv66 option will have no effect.  The  ----vveerr‐‐
              ssiioonn output will tell you if this is the case.

       --hh,, ----hheellpp
              When  specified after ----ddaaeemmoonn, print a short help page describing the options available for start‐
              ing an rsync daemon.


FFIILLTTEERR RRUULLEESS
       The filter rules allow for flexible selection of which files to transfer (include) and which files to skip
       (exclude).   The  rules  either directly specify include/exclude patterns or they specify a way to acquire
       more include/exclude patterns (e.g. to read them from a file).

       As the list of files/directories to transfer is built, rsync checks each name to  be  transferred  against
       the  list  of  include/exclude  patterns in turn, and the first matching pattern is acted on:  if it is an
       exclude pattern, then that file is skipped; if it is an include pattern then that filename is not skipped;
       if no matching pattern is found, then the filename is not skipped.

       Rsync builds an ordered list of filter rules as specified on the command-line.  Filter rules have the fol‐
       lowing syntax:

              RULE [PATTERN_OR_FILENAME]
              RULE,MODIFIERS [PATTERN_OR_FILENAME]


       You have your choice of using either short or  long  RULE  names,  as  described  below.   If  you  use  a
       short-named  rule,  the  ’,’  separating the RULE from the MODIFIERS is optional.  The PATTERN or FILENAME
       that follows (when present) must come after either a single space or an  underscore  (_).   Here  are  the
       available rule prefixes:

              eexxcclluuddee,, -- specifies an exclude pattern.
              iinncclluuddee,, ++ specifies an include pattern.
              mmeerrggee,, .. specifies a merge-file to read for more rules.
              ddiirr--mmeerrggee,, :: specifies a per-directory merge-file.
              hhiiddee,, HH specifies a pattern for hiding files from the transfer.
              sshhooww,, SS files that match the pattern are not hidden.
              pprrootteecctt,, PP specifies a pattern for protecting files from deletion.
              rriisskk,, RR files that match the pattern are not protected.
              cclleeaarr,, !! clears the current include/exclude list (takes no arg)


       When  rules  are  being  read from a file, empty lines are ignored, as are comment lines that start with a
       "#".

       Note that the ----iinncclluuddee/----eexxcclluuddee command-line options do not allow the full  range  of  rule  parsing  as
       described above -- they only allow the specification of include/exclude patterns plus a "!" token to clear
       the list (and the normal comment parsing when rules are read from a file).  If a pattern  does  not  begin
       with  "-  "  (dash,  space)  or  "+  " (plus, space), then the rule will be interpreted as if "+ " (for an
       include option) or "- " (for an exclude option) were prefixed to the string.  A ----ffiilltteerr  option,  on  the
       other hand, must always contain either a short or long rule name at the start of the rule.

       Note  also that the ----ffiilltteerr, ----iinncclluuddee, and ----eexxcclluuddee options take one rule/pattern each. To add multiple
       ones, you can repeat the options on the command-line, use the merge-file syntax of the ----ffiilltteerr option, or
       the ----iinncclluuddee--ffrroomm/----eexxcclluuddee--ffrroomm options.

IINNCCLLUUDDEE//EEXXCCLLUUDDEE PPAATTTTEERRNN RRUULLEESS
       You  can include and exclude files by specifying patterns using the "+", "-", etc. filter rules (as intro‐
       duced in the FILTER RULES section above).  The include/exclude  rules  each  specify  a  pattern  that  is
       matched  against the names of the files that are going to be transferred.  These patterns can take several
       forms:

       o      if the pattern starts with a / then it is anchored to a particular spot in the hierarchy of  files,
              otherwise it is matched against the end of the pathname.  This is similar to a leading ^ in regular
              expressions.  Thus "/foo" would match a name of "foo" at either the "root of the transfer"  (for  a
              global  rule)  or  in  the merge-file’s directory (for a per-directory rule).  An unqualified "foo"
              would match a name of "foo" anywhere in the tree because the algorithm is applied recursively  from
              the  top  down;  it behaves as if each path component gets a turn at being the end of the filename.
              Even the unanchored "sub/foo" would match at any point in the hierarchy where  a  "foo"  was  found
              within  a  directory named "sub".  See the section on ANCHORING INCLUDE/EXCLUDE PATTERNS for a full
              discussion of how to specify a pattern that matches at the root of the transfer.

       o      if the pattern ends with a / then it will only match a directory, not a regular file,  symlink,  or
              device.

       o      rsync  chooses between doing a simple string match and wildcard matching by checking if the pattern
              contains one of these three wildcard characters: ’*’, ’?’, and ’[’ .

       o      a ’*’ matches any path component, but it stops at slashes.

       o      use ’**’ to match anything, including slashes.

       o      a ’?’ matches any character except a slash (/).

       o      a ’[’ introduces a character class, such as [a-z] or [[:alpha:]].

       o      in a wildcard pattern, a backslash can be used to escape a wildcard character, but  it  is  matched
              literally when no wildcards are present.

       o      if  the  pattern contains a / (not counting a trailing /) or a "**", then it is matched against the
              full pathname, including any leading directories. If the pattern doesn’t contain a  /  or  a  "**",
              then  it is matched only against the final component of the filename.  (Remember that the algorithm
              is applied recursively so "full filename" can actually be any portion of a path from  the  starting
              directory on down.)

       o      a  trailing "dir_name/***" will match both the directory (as if "dir_name/" had been specified) and
              everything in the directory (as if "dir_name/**" had been specified).  This behavior was  added  in
              version 2.6.7.


       Note  that,  when  using the ----rreeccuurrssiivvee (--rr) option (which is implied by --aa), every subcomponent of every
       path is visited from the top down, so include/exclude patterns get applied recursively to  each  subcompo‐
       nent’s  full  name  (e.g.  to  include  "/foo/bar/baz" the subcomponents "/foo" and "/foo/bar" must not be
       excluded).  The exclude patterns actually short-circuit the directory traversal stage when rsync finds the
       files  to  send.  If a pattern excludes a particular parent directory, it can render a deeper include pat‐
       tern ineffectual because rsync did not descend through that excluded section of the  hierarchy.   This  is
       particularly important when using a trailing ’*’ rule.  For instance, this won’t work:

              + /some/path/this-file-will-not-be-found
              + /file-is-included
              - *


       This  fails  because the parent directory "some" is excluded by the ’*’ rule, so rsync never visits any of
       the files in the "some" or "some/path" directories.  One solution is to ask for  all  directories  in  the
       hierarchy to be included by using a single rule: "+ */" (put it somewhere before the "- *" rule), and per‐
       haps use the ----pprruunnee--eemmppttyy--ddiirrss option.  Another solution is to add specific include  rules  for  all  the
       parent dirs that need to be visited.  For instance, this set of rules works fine:

              + /some/
              + /some/path/
              + /some/path/this-file-is-found
              + /file-also-included
              - *


       Here are some examples of exclude/include matching:

       o      "- *.o" would exclude all names matching *.o

       o      "- /foo" would exclude a file (or directory) named foo in the transfer-root directory

       o      "- foo/" would exclude any directory named foo

       o      "-  /foo/*/bar" would exclude any file named bar which is at two levels below a directory named foo
              in the transfer-root directory

       o      "- /foo/**/bar" would exclude any file named bar two or more levels below a directory named foo  in
              the transfer-root directory

       o      The  combination of "+ */", "+ *.c", and "- *" would include all directories and C source files but
              nothing else (see also the ----pprruunnee--eemmppttyy--ddiirrss option)

       o      The combination of "+ foo/", "+ foo/bar.c", and "- *" would include  only  the  foo  directory  and
              foo/bar.c (the foo directory must be explicitly included or it would be excluded by the "*")


       The following modifiers are accepted after a "+" or "-":

       o      A  // specifies that the include/exclude rule should be matched against the absolute pathname of the
              current item.  For example, "-/ /etc/passwd" would exclude the passwd file any  time  the  transfer
              was sending files from the "/etc" directory, and "-/ subdir/foo" would always exclude "foo" when it
              is in a dir named "subdir", even if "foo" is at the root of the current transfer.

       o      A !! specifies that the include/exclude should take effect if  the  pattern  fails  to  match.   For
              instance, "-! */" would exclude all non-directories.

       o      A  CC  is  used  to indicate that all the global CVS-exclude rules should be inserted as excludes in
              place of the "-C".  No arg should follow.

       o      An ss is used to indicate that the rule applies to the sending side.  When a rule affects the  send‐
              ing side, it prevents files from being transferred.  The default is for a rule to affect both sides
              unless ----ddeelleettee--eexxcclluuddeedd was specified, in which case default rules become sender-side  only.   See
              also  the  hide  (H)  and  show  (S)  rules,  which  are  an  alternate way to specify sending-side
              includes/excludes.

       o      An rr is used to indicate that the rule applies to the receiving side.   When  a  rule  affects  the
              receiving  side, it prevents files from being deleted.  See the ss modifier for more info.  See also
              the protect (P)  and  risk  (R)  rules,  which  are  an  alternate  way  to  specify  receiver-side
              includes/excludes.

       o      A  pp  indicates that a rule is perishable, meaning that it is ignored in directories that are being
              deleted.  For instance, the --CC option’s default rules that exclude things like "CVS" and "*.o"  are
              marked  as  perishable,  and will not prevent a directory that was removed on the source from being
              deleted on the destination.


MMEERRGGEE--FFIILLEE FFIILLTTEERR RRUULLEESS
       You can merge whole files into your filter rules by specifying either a merge (.) or a dir-merge (:)  fil‐
       ter rule (as introduced in the FILTER RULES section above).

       There  are  two kinds of merged files -- single-instance (’.’) and per-directory (’:’).  A single-instance
       merge file is read one time, and its rules are incorporated into the filter list in the place of  the  "."
       rule.   For  per-directory  merge  files,  rsync will scan every directory that it traverses for the named
       file, merging its contents when the  file  exists  into  the  current  list  of  inherited  rules.   These
       per-directory  rule files must be created on the sending side because it is the sending side that is being
       scanned for the available files to transfer.  These rule files may also need  to  be  transferred  to  the
       receiving side if you want them to affect what files don’t get deleted (see PER-DIRECTORY RULES AND DELETE
       below).

       Some examples:

              merge /etc/rsync/default.rules
              . /etc/rsync/default.rules
              dir-merge .per-dir-filter
              dir-merge,n- .non-inherited-per-dir-excludes
              :n- .non-inherited-per-dir-excludes


       The following modifiers are accepted after a merge or dir-merge rule:

       o      A -- specifies that the file should consist of only exclude patterns,  with  no  other  rule-parsing
              except for in-file comments.

       o      A  ++  specifies  that  the file should consist of only include patterns, with no other rule-parsing
              except for in-file comments.

       o      A CC is a way to specify that the file should be read in a CVS-compatible  manner.   This  turns  on
              ’n’,  ’w’, and ’-’, but also allows the list-clearing token (!) to be specified.  If no filename is
              provided, ".cvsignore" is assumed.

       o      A ee will exclude the merge-file  name  from  the  transfer;  e.g.   "dir-merge,e  .rules"  is  like
              "dir-merge .rules" and "- .rules".

       o      An nn specifies that the rules are not inherited by subdirectories.

       o      A  ww  specifies  that  the rules are word-split on whitespace instead of the normal line-splitting.
              This also turns off comments.  Note: the space that separates the prefix from the rule  is  treated
              specially,  so  "- foo + bar" is parsed as two rules (assuming that prefix-parsing wasn’t also dis‐
              abled).

       o      You may also specify any of the modifiers for the "+" or "-" rules (above) in  order  to  have  the
              rules  that  are  read in from the file default to having that modifier set (except for the !! modi‐
              fier, which would not be useful).  For instance, "merge,-/ .excl" would treat the contents of .excl
              as absolute-path excludes, while "dir-merge,s .filt" and ":sC" would each make all their per-direc‐
              tory rules apply only on the sending side.  If the merge rule specifies sides to affect (via the  ss
              or rr modifier or both), then the rules in the file must not specify sides (via a modifier or a rule
              prefix such as hhiiddee).


       Per-directory rules are inherited in all subdirectories of the directory where the  merge-file  was  found
       unless  the  ’n’ modifier was used.  Each subdirectory’s rules are prefixed to the inherited per-directory
       rules from its parents, which gives the newest rules a higher priority  than  the  inherited  rules.   The
       entire  set  of dir-merge rules are grouped together in the spot where the merge-file was specified, so it
       is possible to override dir-merge rules via a rule that got specified earlier in the list of global rules.
       When  the  list-clearing  rule ("!") is read from a per-directory file, it only clears the inherited rules
       for the current merge file.

       Another way to prevent a single rule from a dir-merge file from being inherited is to  anchor  it  with  a
       leading  slash.   Anchored rules in a per-directory merge-file are relative to the merge-file’s directory,
       so a pattern "/foo" would only match the file "foo" in the directory where the dir-merge filter  file  was
       found.

       Here’s an example filter file which you’d specify via ----ffiilltteerr=="".. ffiillee""::

              merge /home/user/.global-filter
              - *.gz
              dir-merge .rules
              + *.[ch]
              - *.o


       This will merge the contents of the /home/user/.global-filter file at the start of the list and also turns
       the ".rules" filename into a per-directory filter file.  All rules read in  prior  to  the  start  of  the
       directory  scan  follow the global anchoring rules (i.e. a leading slash matches at the root of the trans‐
       fer).

       If a per-directory merge-file is specified with a path that is a parent directory of  the  first  transfer
       directory,  rsync will scan all the parent dirs from that starting point to the transfer directory for the
       indicated per-directory file.  For instance, here is a common filter (see --FF):

              --filter=': /.rsync-filter'


       That rule tells rsync to scan for the file .rsync-filter in all directories from the root down through the
       parent directory of the transfer prior to the start of the normal directory scan of the file in the direc‐
       tories that are sent as a part of the transfer.  (Note: for an rsync daemon, the root is always  the  same
       as the module’s "path".)

       Some examples of this pre-scanning for per-directory files:

              rsync -avF /src/path/ /dest/dir
              rsync -av --filter=': ../../.rsync-filter' /src/path/ /dest/dir
              rsync -av --filter=': .rsync-filter' /src/path/ /dest/dir


       The first two commands above will look for ".rsync-filter" in "/" and "/src" before the normal scan begins
       looking for the file in "/src/path" and its subdirectories.  The last command avoids the  parent-dir  scan
       and only looks for the ".rsync-filter" files in each directory that is a part of the transfer.

       If  you  want  to  include  the contents of a ".cvsignore" in your patterns, you should use the rule ":C",
       which creates a dir-merge of the .cvsignore file, but parsed in a CVS-compatible manner.  You can use this
       to affect where the ----ccvvss--eexxcclluuddee (--CC) option’s inclusion of the per-directory .cvsignore file gets placed
       into your rules by putting the ":C" wherever you like in your filter rules.  Without this, rsync would add
       the  dir-merge rule for the .cvsignore file at the end of all your other rules (giving it a lower priority
       than your command-line rules).  For example:

              cat <<EOT | rsync -avC --filter='. -' a/ b
              + foo.o
              :C
              - *.old
              EOT
              rsync -avC --include=foo.o -f :C --exclude='*.old' a/ b


       Both of the above rsync commands are identical.  Each one will  merge  all  the  per-directory  .cvsignore
       rules in the middle of the list rather than at the end.  This allows their dir-specific rules to supersede
       the rules that follow the :C instead of being subservient to all your rules.   To  affect  the  other  CVS
       exclude  rules  (i.e.  the  default list of exclusions, the contents of $HOME/.cvsignore, and the value of
       $CVSIGNORE) you should omit the --CC command-line option and instead insert a "-C"  rule  into  your  filter
       rules; e.g. "----ffiilltteerr==--CC".

LLIISSTT--CCLLEEAARRIINNGG FFIILLTTEERR RRUULLEE
       You  can  clear the current include/exclude list by using the "!" filter rule (as introduced in the FILTER
       RULES section above).  The "current" list is either the global list of rules (if the rule  is  encountered
       while  parsing  the  filter  options)  or  a  set of per-directory rules (which are inherited in their own
       sub-list, so a subdirectory can use this to clear out the parent’s rules).

AANNCCHHOORRIINNGG IINNCCLLUUDDEE//EEXXCCLLUUDDEE PPAATTTTEERRNNSS
       As mentioned earlier, global include/exclude patterns are anchored at  the  "root  of  the  transfer"  (as
       opposed to per-directory patterns, which are anchored at the merge-file’s directory).  If you think of the
       transfer as a subtree of names that are being sent from sender to receiver, the transfer-root is where the
       tree  starts  to  be duplicated in the destination directory.  This root governs where patterns that start
       with a / match.

       Because the matching is relative to the transfer-root, changing the trailing slash on  a  source  path  or
       changing  your use of the ----rreellaattiivvee option affects the path you need to use in your matching (in addition
       to changing how much of the file tree is duplicated on the  destination  host).   The  following  examples
       demonstrate this.

       Let’s say that we want to match two source files, one with an absolute path of "/home/me/foo/bar", and one
       with a path of "/home/you/bar/baz".  Here is how the various command choices differ for a 2-source  trans‐
       fer:

              Example cmd: rsync -a /home/me /home/you /dest
              +/- pattern: /me/foo/bar
              +/- pattern: /you/bar/baz
              Target file: /dest/me/foo/bar
              Target file: /dest/you/bar/baz


              Example cmd: rsync -a /home/me/ /home/you/ /dest
              +/- pattern: /foo/bar               (note missing "me")
              +/- pattern: /bar/baz               (note missing "you")
              Target file: /dest/foo/bar
              Target file: /dest/bar/baz


              Example cmd: rsync -a --relative /home/me/ /home/you /dest
              +/- pattern: /home/me/foo/bar       (note full path)
              +/- pattern: /home/you/bar/baz      (ditto)
              Target file: /dest/home/me/foo/bar
              Target file: /dest/home/you/bar/baz


              Example cmd: cd /home; rsync -a --relative me/foo you/ /dest
              +/- pattern: /me/foo/bar      (starts at specified path)
              +/- pattern: /you/bar/baz     (ditto)
              Target file: /dest/me/foo/bar
              Target file: /dest/you/bar/baz


       The  easiest way to see what name you should filter is to just look at the output when using ----vveerrbboossee and
       put a / in front of the name (use the ----ddrryy--rruunn option if you’re not yet ready to copy any files).

PPEERR--DDIIRREECCTTOORRYY RRUULLEESS AANNDD DDEELLEETTEE
       Without a delete option, per-directory rules are only relevant on the sending side, so you can  feel  free
       to exclude the merge files themselves without affecting the transfer.  To make this easy, the ’e’ modifier
       adds this exclude for you, as seen in these two equivalent commands:

              rsync -av --filter=': .excl' --exclude=.excl host:src/dir /dest
              rsync -av --filter=':e .excl' host:src/dir /dest


       However, if you want to do a delete on the receiving side AND you want some  files  to  be  excluded  from
       being  deleted,  you’ll  need to be sure that the receiving side knows what files to exclude.  The easiest
       way is to include the per-directory merge files in the  transfer  and  use  ----ddeelleettee--aafftteerr,  because  this
       ensures  that  the  receiving  side gets all the same exclude rules as the sending side before it tries to
       delete anything:

              rsync -avF --delete-after host:src/dir /dest


       However, if the merge files are not a part of the transfer, you’ll need  to  either  specify  some  global
       exclude  rules  (i.e.  specified  on  the command line), or you’ll need to maintain your own per-directory
       merge files on the receiving side.  An example of the first is this (assume that the remote  .rules  files
       exclude themselves):

       rsync -av --filter=’: .rules’ --filter=’. /my/extra.rules’
          --delete host:src/dir /dest


       In the above example the extra.rules file can affect both sides of the transfer, but (on the sending side)
       the rules are subservient to the rules merged from the .rules files because they were specified after  the
       per-directory merge rule.

       In  one final example, the remote side is excluding the .rsync-filter files from the transfer, but we want
       to use our own .rsync-filter files to control what gets deleted on the receiving side.  To do this we must
       specifically  exclude  the  per-directory  merge files (so that they don’t get deleted) and then put rules
       into the local files to control what else should not get deleted.  Like one of these commands:

           rsync -av --filter=':e /.rsync-filter' --delete \
               host:src/dir /dest
           rsync -avFF --delete host:src/dir /dest


BBAATTCCHH MMOODDEE
       Batch mode can be used to apply the same set of updates to many identical systems. Suppose one has a  tree
       which is replicated on a number of hosts.  Now suppose some changes have been made to this source tree and
       those changes need to be propagated to the other hosts. In order to do this using batch mode, rsync is run
       with  the write-batch option to apply the changes made to the source tree to one of the destination trees.
       The write-batch option causes the rsync client to store in a "batch file" all the  information  needed  to
       repeat this operation against other, identical destination trees.

       Generating  the  batch file once saves having to perform the file status, checksum, and data block genera‐
       tion more than once when updating multiple destination trees. Multicast transport protocols can be used to
       transfer  the  batch  update  files in parallel to many hosts at once, instead of sending the same data to
       every host individually.

       To apply the recorded changes to another destination tree, run rsync with the read-batch option,  specify‐
       ing  the  name of the same batch file, and the destination tree.  Rsync updates the destination tree using
       the information stored in the batch file.

       For your convenience, a script file is also created when the write-batch option is used:  it will be named
       the  same  as  the  batch file with ".sh" appended.  This script file contains a command-line suitable for
       updating a destination tree using the associated batch file.  It  can  be  executed  using  a  Bourne  (or
       Bourne-like)  shell,  optionally  passing  in  an  alternate  destination tree pathname which is then used
       instead of the original destination path.  This is useful when the destination tree path  on  the  current
       host differs from the one used to create the batch file.

       Examples:

              $ rsync --write-batch=foo -a host:/source/dir/ /adest/dir/
              $ scp foo* remote:
              $ ssh remote ./foo.sh /bdest/dir/


              $ rsync --write-batch=foo -a /source/dir/ /adest/dir/
              $ ssh remote rsync --read-batch=- -a /bdest/dir/ <foo


       In  these  examples,  rsync  is used to update /adest/dir/ from /source/dir/ and the information to repeat
       this operation is stored in "foo" and "foo.sh".  The host "remote" is then updated with the  batched  data
       going  into the directory /bdest/dir.  The differences between the two examples reveals some of the flexi‐
       bility you have in how you deal with batches:

       o      The first example shows that the initial copy doesn’t have to be local -- you can push or pull data
              to/from a remote host using either the remote-shell syntax or rsync daemon syntax, as desired.

       o      The  first  example  uses the created "foo.sh" file to get the right rsync options when running the
              read-batch command on the remote host.

       o      The second example reads the batch data via standard input so that the batch file doesn’t  need  to
              be  copied to the remote machine first.  This example avoids the foo.sh script because it needed to
              use a modified ----rreeaadd--bbaattcchh option, but you could edit the script file if you wished to make use of
              it   (just  be  sure  that  no  other  option  is  trying  to  use  standard  input,  such  as  the
              "----eexxcclluuddee--ffrroomm==--" option).


       Caveats:

       The read-batch option expects the destination tree that it is updating to be identical to the  destination
       tree that was used to create the batch update fileset.  When a difference between the destination trees is
       encountered the update might be discarded with a warning (if the file appears to be up-to-date already) or
       the  file-update  may  be  attempted  and  then, if the file fails to verify, the update discarded with an
       error.  This means that it should be safe to re-run a read-batch operation if the command got interrupted.
       If you wish to force the batched-update to always be attempted regardless of the file’s size and date, use
       the --II option (when reading the batch).  If an error occurs, the destination tree will probably  be  in  a
       partially  updated  state. In that case, rsync can be used in its regular (non-batch) mode of operation to
       fix up the destination tree.

       The rsync version used on all destinations must be at least as new as the one used to generate  the  batch
       file.   Rsync  will  die  with  an  error  if  the  protocol  version in the batch file is too new for the
       batch-reading rsync to handle.  See also the ----pprroottooccooll option for a way to have the creating rsync gener‐
       ate  a  batch  file  that an older rsync can understand.  (Note that batch files changed format in version
       2.6.3, so mixing versions older than that with newer versions will not work.)

       When reading a batch file, rsync will force the value of certain options to match the data  in  the  batch
       file  if  you didn’t set them to the same as the batch-writing command.  Other options can (and should) be
       changed.  For instance ----wwrriittee--bbaattcchh changes to ----rreeaadd--bbaattcchh, ----ffiilleess--ffrroomm  is  dropped,  and  the  ----ffiill‐‐
       tteerr/----iinncclluuddee/----eexxcclluuddee options are not needed unless one of the ----ddeelleettee options is specified.

       The  code  that creates the BATCH.sh file transforms any filter/include/exclude options into a single list
       that is appended as a "here" document to the shell script file.  An advanced user can use this  to  modify
       the  exclude  list if a change in what gets deleted by ----ddeelleettee is desired.  A normal user can ignore this
       detail and just use the shell script as an easy way to run the appropriate ----rreeaadd--bbaattcchh  command  for  the
       batched data.

       The original batch mode in rsync was based on "rsync+", but the latest version uses a new implementation.

SSYYMMBBOOLLIICC LLIINNKKSS
       Three basic behaviors are possible when rsync encounters a symbolic link in the source directory.

       By  default,  symbolic links are not transferred at all.  A message "skipping non-regular" file is emitted
       for any symlinks that exist.

       If ----lliinnkkss is specified, then symlinks are recreated with the same target on the destination.   Note  that
       ----aarrcchhiivvee implies ----lliinnkkss.

       If  ----ccooppyy--lliinnkkss  is  specified,  then symlinks are "collapsed" by copying their referent, rather than the
       symlink.

       Rsync can also distinguish "safe" and "unsafe" symbolic links.  An example where this might be used  is  a
       web site mirror that wishes to ensure that the rsync module that is copied does not include symbolic links
       to //eettcc//ppaasssswwdd in the public section of the site.  Using ----ccooppyy--uunnssaaffee--lliinnkkss will cause any  links  to  be
       copied  as  the  file  they point to on the destination.  Using ----ssaaffee--lliinnkkss will cause unsafe links to be
       omitted altogether.  (Note that you must specify ----lliinnkkss for ----ssaaffee--lliinnkkss to have any effect.)

       Symbolic links are considered unsafe if they are absolute symlinks (start with //), empty, or if they  con‐
       tain enough ".." components to ascend from the directory being copied.

       Here’s  a  summary  of how the symlink options are interpreted.  The list is in order of precedence, so if
       your combination of options isn’t mentioned, use the first line that is a complete subset of your options:

       ----ccooppyy--lliinnkkss
              Turn all symlinks into normal files (leaving no symlinks for any other options to affect).

       ----lliinnkkss ----ccooppyy--uunnssaaffee--lliinnkkss
              Turn all unsafe symlinks into files and duplicate all safe symlinks.

       ----ccooppyy--uunnssaaffee--lliinnkkss
              Turn all unsafe symlinks into files, noisily skip all safe symlinks.

       ----lliinnkkss ----ssaaffee--lliinnkkss
              Duplicate safe symlinks and skip unsafe ones.

       ----lliinnkkss
              Duplicate all symlinks.

DDIIAAGGNNOOSSTTIICCSS
       rsync occasionally produces error messages that may seem a little cryptic. The one that seems to cause the
       most confusion is "protocol version mismatch -- is your shell clean?".

       This message is usually caused by your startup scripts or remote shell facility producing unwanted garbage
       on the stream that rsync is using for its transport. The way to diagnose  this  problem  is  to  run  your
       remote shell like this:

              ssh remotehost /bin/true > out.dat


       then look at out.dat. If everything is working correctly then out.dat should be a zero length file. If you
       are getting the above error from rsync then you will probably find that  out.dat  contains  some  text  or
       data.  Look at the contents and try to work out what is producing it. The most common cause is incorrectly
       configured shell startup scripts  (such  as  .cshrc  or  .profile)  that  contain  output  statements  for
       non-interactive logins.

       If you are having trouble debugging filter patterns, then try specifying the --vvvv option.  At this level of
       verbosity rsync will show why each individual file is included or excluded.

EEXXIITT VVAALLUUEESS
       00      Success

       11      Syntax or usage error

       22      Protocol incompatibility

       33      Errors selecting input/output files, dirs

       44      Requested action not supported: an attempt was made to manipulate 64-bit files on a  platform  that
              cannot  support  them;  or  an  option was specified that is supported by the client and not by the
              server.

       55      Error starting client-server protocol

       66      Daemon unable to append to log-file

       1100     Error in socket I/O

       1111     Error in file I/O

       1122     Error in rsync protocol data stream

       1133     Errors with program diagnostics

       1144     Error in IPC code

       2200     Received SIGUSR1 or SIGINT

       2211     Some error returned by waitpid()

       2222     Error allocating core memory buffers

       2233     Partial transfer due to error

       2244     Partial transfer due to vanished source files

       2255     The --max-delete limit stopped deletions

       3300     Timeout in data send/receive

       3355     Timeout waiting for daemon connection


EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       CCVVSSIIGGNNOORREE
              The CVSIGNORE environment variable supplements any ignore patterns in  .cvsignore  files.  See  the
              ----ccvvss--eexxcclluuddee option for more details.

       RRSSYYNNCC__IICCOONNVV
              Specify a default ----iiccoonnvv setting using this environment variable. (First supported in 3.0.0.)

       RRSSYYNNCC__PPRROOTTEECCTT__AARRGGSS
              Specify a non-zero numeric value if you want the ----pprrootteecctt--aarrggss option to be enabled by default, or
              a zero value to make sure that it is disabled by default. (First supported in 3.1.0.)

       RRSSYYNNCC__RRSSHH
              The RSYNC_RSH environment variable allows you to override the default shell used as  the  transport
              for rsync.  Command line options are permitted after the command name, just as in the --ee option.

       RRSSYYNNCC__PPRROOXXYY
              The  RSYNC_PROXY  environment  variable allows you to redirect your rsync client to use a web proxy
              when connecting to a rsync daemon. You should set RSYNC_PROXY to a hostname:port pair.

       RRSSYYNNCC__PPAASSSSWWOORRDD
              Setting RSYNC_PASSWORD to the required password allows you to run authenticated  rsync  connections
              to an rsync daemon without user intervention. Note that this does not supply a password to a remote
              shell transport such as ssh; to learn how to do that, consult the remote shell’s documentation.

       UUSSEERR or LLOOGGNNAAMMEE
              The USER or LOGNAME environment variables are used to determine the default  username  sent  to  an
              rsync daemon.  If neither is set, the username defaults to "nobody".

       HHOOMMEE   The HOME environment variable is used to find the user’s default .cvsignore file.


FFIILLEESS
       /etc/rsyncd.conf or rsyncd.conf

SSEEEE AALLSSOO
       rrssyynnccdd..ccoonnff(5)

BBUUGGSS
       times are transferred as *nix time_t values

       When  transferring  to FAT filesystems rsync may re-sync unmodified files.  See the comments on the ----mmoodd‐‐
       iiffyy--wwiinnddooww option.

       file permissions, devices, etc. are transferred as native numerical values

       see also the comments on the ----ddeelleettee option

       Please report bugs! See the web site at http://rsync.samba.org/

VVEERRSSIIOONN
       This man page is current for version 3.1.0 of rsync.

IINNTTEERRNNAALL OOPPTTIIOONNSS
       The options ----sseerrvveerr and ----sseennddeerr are used internally by rsync, and should never be typed by a user  under
       normal  circumstances.   Some  awareness of these options may be needed in certain scenarios, such as when
       setting up a login that can only run an rsync command.  For instance, the support directory of  the  rsync
       distribution  has an example script named rrsync (for restricted rsync) that can be used with a restricted
       ssh login.

CCRREEDDIITTSS
       rsync is distributed under the GNU General Public License.  See the file COPYING for details.

       A WEB site is available at http://rsync.samba.org/.  The site includes  an  FAQ-O-Matic  which  may  cover
       questions unanswered by this manual page.

       The primary ftp site for rsync is ftp://rsync.samba.org/pub/rsync.

       We  would  be  delighted  to  hear  from you if you like this program.  Please contact the mailing-list at
       rsync@lists.samba.org.

       This program uses the excellent zlib compression library written by Jean-loup Gailly and Mark Adler.

TTHHAANNKKSS
       Special thanks go out to: John Van Essen, Matt McCutchen, Wesley W. Terpstra, David Dykstra,  Jos  Backus,
       Sebastian Krahmer, Martin Pool, and our gone-but-not-forgotten compadre, J.W. Schultz.

       Thanks  also to Richard Brent, Brendan Mackay, Bill Waite, Stephen Rothwell and David Bell.  I’ve probably
       missed some people, my apologies if I have.

AAUUTTHHOORR
       rsync was originally written by Andrew Tridgell and Paul Mackerras.  Many people have later contributed to
       it.  It is currently maintained by Wayne Davison.

       Mailing lists for support and development are available at http://lists.samba.org



                                                   28 Sep 2013                                           rsync(1)
